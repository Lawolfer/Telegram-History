
import os
import telegram
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, ConversationHandler, CallbackQueryHandler
import requests
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ API –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Google Gemini API

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
TOPIC, CHOOSE_TOPIC, TEST, ANSWER = range(4)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Google Gemini API
def ask_grok(prompt):
    # –£–ø—Ä–æ—â–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –æ—à–∏–±–æ–∫
    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={GEMINI_API_KEY}"
    headers = {
        "Content-Type": "application/json"
    }
    data = {
        "contents": [
            {
                "parts": [
                    {
                        "text": prompt
                    }
                ]
            }
        ],
        "generationConfig": {
            "temperature": 0.7,
            "maxOutputTokens": 1024
        }
    }
    try:
        response = requests.post(url, headers=headers, json=data)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
        
        # –í—ã–≤–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print("–û—Ç–≤–µ—Ç –æ—Ç API —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        response_json = response.json()
        
        # –í—ã–≤–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {response_json.keys()}")
        
        if "candidates" not in response_json or not response_json["candidates"]:
            print(f"–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'candidates': {response_json}")
            return "API –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç –±–µ–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø—Ä–æ—Å –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."
            
        if "content" not in response_json["candidates"][0]:
            print(f"–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'content': {response_json['candidates'][0]}")
            return "API –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞."
            
        if "parts" not in response_json["candidates"][0]["content"] or not response_json["candidates"][0]["content"]["parts"]:
            print(f"–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'parts': {response_json['candidates'][0]['content']}")
            return "API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç."
            
        return response_json["candidates"][0]["content"]["parts"][0]["text"]
    except requests.exceptions.HTTPError as e:
        print(f"HTTP –û—à–∏–±–∫–∞: {e}")
        if hasattr(e, 'response') and e.response:
            print(f"–°—Ç–∞—Ç—É—Å –∫–æ–¥: {e.response.status_code}")
            print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")
        return f"–û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Google Gemini: {e}"
    except requests.exceptions.ConnectionError as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
        return "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API Google Gemini. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É."
    except requests.exceptions.Timeout as e:
        print(f"–û—à–∏–±–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞: {e}")
        return "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API Google Gemini."
    except ValueError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API Google Gemini."
    except Exception as e:
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ API: {e}")
        if hasattr(e, 'response') and e.response:
            print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")
        return f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Google Gemini: {e}"

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Hugging Face (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ Hugging Face)
"""
def ask_grok(prompt):
    url = "https://api-inference.huggingface.co/models/google/flan-t5-large"
    headers = {
        "Authorization": f"Bearer {GROK_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "inputs": prompt,
        "parameters": {"max_length": 1000}
    }
    try:
        response = requests.post(url, headers=headers, json=data)
        response.raise_for_status()
        return response.json()[0]["generated_text"]
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Hugging Face: {e}"
"""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu():
    keyboard = [
        [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É", callback_data='topic')],
        [InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data='test')],
        [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data='cancel')]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start (–Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º)
def start(update, context):
    user = update.message.from_user
    update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –∏–∑—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –†–æ—Å—Å–∏–∏. "
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=main_menu()
    )
    return TOPIC

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
def button_handler(update, context):
    query = update.callback_query
    query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏

    if query.data == 'back_to_menu':
        query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=main_menu()
        )
        return TOPIC
    elif query.data == 'topic':
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º —Å –ø–æ–º–æ—â—å—é –ò–ò
        prompt = "–°–æ—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ –∏–∑ 7 –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–º –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è. –ö–∞–∂–¥–∞—è —Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –µ–º–∫–æ–π –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π (–Ω–µ –±–æ–ª–µ–µ 6-7 —Å–ª–æ–≤). –ü–µ—Ä–µ—á–∏—Å–ª–∏ –∏—Ö –≤ –≤–∏–¥–µ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞."
        try:
            query.edit_message_text("–ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ —Ç–µ–º –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏...")
            topics = ask_grok(prompt)
            
            # –û—á–∏—â–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ç–µ–º—ã
            filtered_topics = []
            for line in topics.split('\n'):
                line = line.strip()
                if line and ('.' in line or ':' in line):
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Ç–µ–º—ã –ø–æ—Å–ª–µ –Ω–æ–º–µ—Ä–∞ –∏–ª–∏ –¥–≤–æ–µ—Ç–æ—á–∏—è
                    parts = line.split('.', 1) if '.' in line else line.split(':', 1)
                    if len(parts) > 1:
                        filtered_topics.append(parts[1].strip())
            
            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —Ç–µ–º, –±–µ—Ä–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            if not filtered_topics:
                filtered_topics = [line.strip() for line in topics.split('\n') if line.strip()]
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 7 —Ç–µ–º –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            filtered_topics = filtered_topics[:7]
            
            context.user_data['topics'] = filtered_topics
            keyboard = []
            
            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–µ –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–º–∞–º–∏
            for i, topic in enumerate(filtered_topics, 1):
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–º—ã –≤ –∫–Ω–æ–ø–∫–µ
                display_topic = topic[:30] + '...' if len(topic) > 30 else topic
                keyboard.append([InlineKeyboardButton(f"{i}. {display_topic}", callback_data=f'topic_{i}')])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –≤–≤–æ–¥–∞ —Å–≤–æ–µ–π —Ç–µ–º—ã
            bottom_row = [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='back_to_menu'),
                          InlineKeyboardButton("–°–≤–æ—è —Ç–µ–º–∞", callback_data='custom_topic')]
            keyboard.append(bottom_row)
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            query.edit_message_text(
                "üìö *–¢–µ–º—ã –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        except Exception as e:
            query.edit_message_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–µ–º: {e}. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", reply_markup=main_menu())
        return CHOOSE_TOPIC
    elif query.data == 'test':
        topic = context.user_data.get('current_topic', None)
        if not topic:
            query.edit_message_text(
                "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–µ–º—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É'.",
                reply_markup=main_menu()
            )
            return TOPIC
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 10 –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞ (—É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ 10 –¥–ª—è –ª—É—á—à–µ–π —Ä–∞–±–æ—Ç—ã —Å API)
        prompt = f"–°–æ—Å—Ç–∞–≤—å 10 –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞ (a, b, c, d) –ø–æ —Ç–µ–º–µ '{topic}' –≤ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏. –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ —É–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <–±—É–∫–≤–∞>'. –ö–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è —Å—Ç—Ä–æ–∫–æ–π '---'."
        try:
            questions = ask_grok(prompt)
            context.user_data['questions'] = questions.split('---')  # –†–∞–∑–¥–µ–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã
            context.user_data['current_question'] = 0
            context.user_data['score'] = 0
            query.edit_message_text("–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –∏–∑ 10 –≤–æ–ø—Ä–æ—Å–æ–≤! –í–æ—Ç –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å:")
            query.message.reply_text(context.user_data['questions'][0])
            query.message.reply_text("–ù–∞–ø–∏—à–∏ –±—É–∫–≤—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (a, b, c –∏–ª–∏ d).")
        except Exception as e:
            query.edit_message_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", reply_markup=main_menu())
        return ANSWER
    elif query.data == 'continue_reading':
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
        part2 = context.user_data.get('topic_part2', "–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        query.edit_message_text(part2)
        query.message.reply_text("–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
        return TOPIC
    elif query.data == 'cancel':
        query.edit_message_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–æ–¥–∞ —Å–≤–æ–µ–π —Ç–µ–º—ã
def choose_topic(update, context):
    query = update.callback_query
    query.answer()

    if query.data == 'custom_topic':
        query.edit_message_text("–ù–∞–ø–∏—à–∏ —Ç–µ–º—É –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –∏–∑—É—á–∏—Ç—å.")
        return CHOOSE_TOPIC
    elif query.data.startswith('topic_'):
        try:
            topic_index = int(query.data.split('_')[1]) - 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –≤ —Å–ø–∏—Å–∫–µ
            if 0 <= topic_index < len(context.user_data['topics']):
                topic = context.user_data['topics'][topic_index]
                # –£–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä –∏–∑ —Ç–µ–º—ã, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                if '. ' in topic:
                    topic = topic.split('. ', 1)[1]
                
                context.user_data['current_topic'] = topic
                query.edit_message_text(f"üìù –ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ: *{topic}*...", parse_mode='Markdown')
                prompt = f"–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–æ –æ {topic} –≤ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π —Ç–µ–∫—Å—Ç –ø–æ –¥–∞—Ç–∞–º –∏–ª–∏ —Å–æ–±—ã—Ç–∏—è–º."
                
                response = ask_grok(prompt)
                
                # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏
                if len(response) > 1000:
                    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è (–∫–æ–Ω–µ—Ü –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤)
                    split_point = 1000
                    for i in range(1000, min(1500, len(response))):
                        if response[i] in ['.', '!', '?'] and (i + 1 >= len(response) or response[i + 1] == ' '):
                            split_point = i + 1
                            break
                    
                    part1 = response[:split_point]
                    part2 = response[split_point:]
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                    context.user_data['topic_part2'] = part2
                    
                    # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —á—Ç–µ–Ω–∏–µ"
                    continue_keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton("üìñ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —á—Ç–µ–Ω–∏–µ", callback_data='continue_reading')]
                    ])
                    
                    query.edit_message_text(part1, reply_markup=continue_keyboard)
                else:
                    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—Ç–∫–∏–π, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ü–µ–ª–∏–∫–æ–º
                    query.edit_message_text(response)
                    query.message.reply_text("–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
            else:
                query.edit_message_text(f"–û—à–∏–±–∫–∞: –¢–µ–º–∞ —Å –∏–Ω–¥–µ–∫—Å–æ–º {topic_index+1} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ç–µ–º—É.", reply_markup=main_menu())
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–º—ã: {e}")
            query.edit_message_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–º—ã: {e}. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", reply_markup=main_menu())
        return TOPIC

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–≤–æ–µ–π —Ç–µ–º—ã
def handle_custom_topic(update, context):
    topic = update.message.text
    context.user_data['current_topic'] = topic
    prompt = f"–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–æ –æ {topic} –≤ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π —è–∑—ã–∫. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π —Ç–µ–∫—Å—Ç –ø–æ –¥–∞—Ç–∞–º –∏–ª–∏ —Å–æ–±—ã—Ç–∏—è–º."
    try:
        response = ask_grok(prompt)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏
        if len(response) > 1000:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è (–∫–æ–Ω–µ—Ü –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤)
            split_point = 1000
            for i in range(1000, min(1500, len(response))):
                if response[i] in ['.', '!', '?'] and (i + 1 >= len(response) or response[i + 1] == ' '):
                    split_point = i + 1
                    break
            
            part1 = response[:split_point]
            part2 = response[split_point:]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['topic_part2'] = part2
            
            # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —á—Ç–µ–Ω–∏–µ"
            continue_keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üìñ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —á—Ç–µ–Ω–∏–µ", callback_data='continue_reading')]
            ])
            
            update.message.reply_text(part1, reply_markup=continue_keyboard)
        else:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—Ç–∫–∏–π, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ü–µ–ª–∏–∫–æ–º
            update.message.reply_text(response)
            update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
    except Exception as e:
        update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", reply_markup=main_menu())
    return TOPIC

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Ç–µ—Å—Ç
def handle_answer(update, context):
    user_answer = update.message.text.lower()
    questions = context.user_data['questions']
    current_question = context.user_data['current_question']
    
    # –ü–∞—Ä—Å–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
    try:
        correct_answer = questions[current_question].split("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ")[1][0].lower()
    except IndexError:
        update.message.reply_text("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤–æ–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–∞–≤ '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç'.", reply_markup=main_menu())
        return TOPIC
    
    if user_answer == correct_answer:
        context.user_data['score'] += 1
        update.message.reply_text("–ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        update.message.reply_text(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")
    
    context.user_data['current_question'] += 1
    if context.user_data['current_question'] < len(questions):
        update.message.reply_text(f"–í–æ–ø—Ä–æ—Å {context.user_data['current_question'] + 1} –∏–∑ {len(questions)}:")
        update.message.reply_text(questions[context.user_data['current_question']])
        update.message.reply_text("–ù–∞–ø–∏—à–∏ –±—É–∫–≤—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (a, b, c –∏–ª–∏ d).")
        return ANSWER
    else:
        score = context.user_data['score']
        total_questions = len(questions)
        percentage = (score / total_questions) * 100
        # –û—Ü–µ–Ω–∫–∞ —É—Å–≤–æ–µ–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        if percentage >= 90:
            assessment = "–û—Ç–ª–∏—á–Ω–æ! –¢—ã –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ —É—Å–≤–æ–∏–ª –º–∞—Ç–µ—Ä–∏–∞–ª."
        elif percentage >= 70:
            assessment = "–•–æ—Ä–æ—à–æ! –¢—ã –Ω–µ–ø–ª–æ—Ö–æ —É—Å–≤–æ–∏–ª –º–∞—Ç–µ—Ä–∏–∞–ª, –Ω–æ –µ—Å—Ç—å –Ω–∞–¥ —á–µ–º –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å."
        elif percentage >= 50:
            assessment = "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª."
        else:
            assessment = "–ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ. –¢–µ–±–µ —Å—Ç–æ–∏—Ç –∏–∑—É—á–∏—Ç—å —Ç–µ–º—É –∑–∞–Ω–æ–≤–æ."
        update.message.reply_text(
            f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –¢—ã –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {score} –∏–∑ {total_questions} –≤–æ–ø—Ä–æ—Å–æ–≤ ({percentage:.2f}%).\n{assessment}\n"
            "–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu()
        )
        return TOPIC

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    updater = Updater(TELEGRAM_TOKEN, use_context=True)
    dp = updater.dispatcher

    # –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–º
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            TOPIC: [
                CallbackQueryHandler(button_handler)
            ],
            CHOOSE_TOPIC: [
                CallbackQueryHandler(choose_topic),
                MessageHandler(Filters.text & ~Filters.command, handle_custom_topic)
            ],
            TEST: [
                CallbackQueryHandler(button_handler)
            ],
            ANSWER: [
                MessageHandler(Filters.text & ~Filters.command, handle_answer)
            ]
        },
        fallbacks=[CommandHandler('start', start)]
    )

    dp.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
