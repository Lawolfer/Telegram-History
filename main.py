import os
import telegram
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, ConversationHandler, CallbackQueryHandler
import requests
from dotenv import load_dotenv


import logging
from logging.handlers import RotatingFileHandler
from datetime import datetime
import background  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å Flask-—Å–µ—Ä–≤–µ—Ä–∞

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_date = datetime.now().strftime('%Y%m%d')
log_formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
log_dir = "logs"
if not os.path.exists(log_dir):
    os.makedirs(log_dir)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º RotatingFileHandler –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤
log_file_path = f"{log_dir}/bot_log_{log_date}.log"
file_handler = RotatingFileHandler(
    log_file_path, 
    maxBytes=10485760,  # 10 –ú–ë
    backupCount=5
)
file_handler.setFormatter(log_formatter)

# –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
console_handler = logging.StreamHandler()
console_handler.setFormatter(log_formatter)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger()
logger.setLevel(logging.INFO)
logger.addHandler(file_handler)
logger.addHandler(console_handler)

print(f"–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ. –§–∞–π–ª—ã –ª–æ–≥–æ–≤ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤: {log_file_path}")

# –°–ª–æ–≤–∞—Ä—å —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –æ—à–∏–±–æ–∫ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
ERROR_DESCRIPTIONS = {
    'ConnectionError': '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–Ω–µ—à–Ω–µ–º—É API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.',
    'Timeout': '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –≤–Ω–µ—à–Ω–µ–≥–æ API.',
    'JSONDecodeError': '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON –æ—Ç–≤–µ—Ç–∞ –æ—Ç API.',
    'HTTPError': '–û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –≤–Ω–µ—à–Ω–µ–º—É API.',
    'TelegramError': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å Telegram API.',
    'KeyboardInterrupt': '–ë–æ—Ç –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.',
    'ApiError': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º API.',
}

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
def log_error(error, additional_info=None):
    error_type = type(error).__name__
    error_message = str(error)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∏–∑–≤–µ—Å—Ç–Ω—ã–º —Ç–∏–ø–∞–º –æ—à–∏–±–æ–∫
    if error_type in ERROR_DESCRIPTIONS:
        comment = ERROR_DESCRIPTIONS[error_type]
        logger.error(f"{error_type}: {error_message} => {comment}")
    else:
        logger.error(f"{error_type}: {error_message}")

    if additional_info:
        logger.error(f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {additional_info}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()


# –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –º–µ—Ö–∞–Ω–∏–∑–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
class SimpleCache:
    def __init__(self, max_size=100):
        self.cache = {}
        self.max_size = max_size

    def get(self, key):
        """–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞ –ø–æ –∫–ª—é—á—É"""
        return self.cache.get(key)

    def set(self, key, value):
        """–î–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫—ç—à"""
        # –ï—Å–ª–∏ –∫—ç—à –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, —É–¥–∞–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        if len(self.cache) >= self.max_size:
            import random
            random_key = random.choice(list(self.cache.keys()))
            del self.cache[random_key]

        self.cache[key] = value

    def clear(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à"""
        self.cache.clear()

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞
api_cache = SimpleCache()

# –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ API –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Google Gemini API

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
TOPIC, CHOOSE_TOPIC, TEST, ANSWER = range(4)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Google Gemini API
def ask_grok(prompt, max_tokens=1024, temp=0.7, use_cache=True):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Google Gemini API –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç.

    Args:
        prompt (str): –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
        max_tokens (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
        temp (float): –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (0.0-1.0)
        use_cache (bool): –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ

    Returns:
        str: –û—Ç–≤–µ—Ç –æ—Ç API –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    """
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫—ç—à–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
    cache_key = f"{prompt}_{max_tokens}_{temp}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∞ –≤–∫–ª—é—á–µ–Ω–æ
    if use_cache:
        cached_response = api_cache.get(cache_key)
        if cached_response:
            print("–ò—Å–ø–æ–ª—å–∑—É—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç")
            return cached_response

    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={GEMINI_API_KEY}"
    headers = {"Content-Type": "application/json"}
    data = {
        "contents": [{"parts": [{"text": prompt}]}],
        "generationConfig": {
            "temperature": temp,
            "maxOutputTokens": max_tokens
        }
    }

    try:
        response = requests.post(url, headers=headers, json=data)
        response.raise_for_status()

        response_json = response.json()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π –≤ –æ—Ç–≤–µ—Ç–µ
        if "candidates" not in response_json or not response_json["candidates"]:
            print(f"–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'candidates': {response_json}")
            return "API –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç –±–µ–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø—Ä–æ—Å –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."

        candidate = response_json["candidates"][0]
        if "content" not in candidate:
            print(f"–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'content': {candidate}")
            return "API –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞."

        content = candidate["content"]
        if "parts" not in content or not content["parts"]:
            print(f"–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'parts': {content}")
            return "API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç."

        result = content["parts"][0]["text"]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à
        if use_cache:
            api_cache.set(cache_key, result)

        return result

    except requests.exceptions.RequestException as e:
        error_type = type(e).__name__
        error_msg = str(e)
        print(f"{error_type}: {error_msg}")

        if isinstance(e, requests.exceptions.HTTPError) and hasattr(e, 'response'):
            print(f"–°—Ç–∞—Ç—É—Å –∫–æ–¥: {e.response.status_code}")
            print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text}")
            return f"–û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Google Gemini ({e.response.status_code}): {error_msg}"

        error_messages = {
            "ConnectionError": "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API Google Gemini. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.",
            "Timeout": "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API Google Gemini.",
            "JSONDecodeError": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API Google Gemini.",
            "HTTPError": f"–û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Google Gemini: {error_msg}"
        }

        return error_messages.get(error_type, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Google Gemini: {error_msg}")

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Hugging Face (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ Hugging Face)
"""
def ask_grok(prompt):
    url = "https://api-inference.huggingface.co/models/google/flan-t5-large"
    headers = {
        "Authorization": f"Bearer {GROK_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "inputs": prompt,
        "parameters": {"max_length": 1000}
    }
    try:
        response = requests.post(url, headers=headers, json=data)
        response.raise_for_status()
        return response.json()[0]["generated_text"]
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Hugging Face: {e}"
"""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu():
    keyboard = [
        [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É", callback_data='topic')],
        [InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data='test')],
        [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data='cancel')]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start (–Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º)
def start(update, context):
    user = update.message.from_user
    update.message.reply_text(
        f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n\n"
        "ü§ñ –Ø –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –±–æ—Ç –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏. –° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n\n"
        "üìö *–ò–∑—É—á–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ç–µ–º—ã* ‚Äî –æ—Ç –¥—Ä–µ–≤–Ω–∏—Ö –≤—Ä–µ–º–µ–Ω –¥–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏\n"
        "‚úÖ *–ü—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç—ã* –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π\n"
        "üîç *–í—ã–±–∏—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–º—ã* –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞\n"
        "üìù *–ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Å–≤–æ–∏ —Ç–µ–º—ã* –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ —Å–ø–∏—Å–∫–µ\n\n"
        "–ö–∞–∂–¥–∞—è —Ç–µ–º–∞ –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ 5 –≥–ª–∞–≤–∞—Ö —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏—Å—Ç–æ–∫–∞—Ö, –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö, "
        "–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –ª–∏—á–Ω–æ—Å—Ç—è—Ö, –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏.\n\n"
        "‚ùó *–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω –≤ –∫–∞—á–µ—Å—Ç–≤–µ —É—á–µ–±–Ω–æ–≥–æ –ø–æ—Å–æ–±–∏—è.*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:",
        reply_markup=main_menu(),
        parse_mode='Markdown'
    )
    return TOPIC

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–º –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞ API
def parse_topics(topics_text):
    """
    –ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç —Å —Ç–µ–º–∞–º–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ–º.

    Args:
        topics_text (str): –¢–µ–∫—Å—Ç —Å —Ç–µ–º–∞–º–∏ –æ—Ç API

    Returns:
        list: –°–ø–∏—Å–æ–∫ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–º
    """
    filtered_topics = []
    for line in topics_text.split('\n'):
        line = line.strip()
        if not line or len(line) <= 1:
            continue

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Ç–µ–º—ã –ø–æ—Å–ª–µ –Ω–æ–º–µ—Ä–∞ –∏–ª–∏ –¥–≤–æ–µ—Ç–æ—á–∏—è
        if '.' in line or ':' in line:
            parts = line.split('.', 1) if '.' in line else line.split(':', 1)
            if len(parts) > 1:
                topic_text = parts[1].strip()
                if topic_text:
                    filtered_topics.append(topic_text)
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–º–µ—Ä–∞ –≤ –Ω–∞—á–∞–ª–µ
        elif line[0].isdigit():
            # –ò—â–µ–º –ø–µ—Ä–≤—ã–π –Ω–µ —Ü–∏—Ñ—Ä–æ–≤–æ–π –∏ –Ω–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
            i = 1
            while i < len(line) and (line[i].isdigit() or line[i] in ' \t.):'):
                i += 1
            if i < len(line):
                topic_text = line[i:].strip()
                if topic_text:
                    filtered_topics.append(topic_text)
        # –ò–Ω–∞—á–µ –±–µ—Ä–µ–º —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –µ—Å—Ç—å
        else:
            filtered_topics.append(line)

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 30 —Ç–µ–º
    return filtered_topics[:30]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ç–µ–º–∞–º–∏
def create_topics_keyboard(topics):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã.

    Args:
        topics (list): –°–ø–∏—Å–æ–∫ —Ç–µ–º

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    """
    keyboard = []

    for i, topic in enumerate(topics, 1):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–º–∞ –Ω–µ –ø—É—Å—Ç–∞—è
        if topic and len(topic.strip()) > 0:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–º—ã –≤ –∫–Ω–æ–ø–∫–µ
            display_topic = topic[:30] + '...' if len(topic) > 30 else topic
            keyboard.append([InlineKeyboardButton(f"{i}. {display_topic}", callback_data=f'topic_{i}')])
        else:
            # –ï—Å–ª–∏ —Ç–µ–º–∞ –ø—É—Å—Ç–∞—è, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å
            keyboard.append([InlineKeyboardButton(f"{i}. [–¢–µ–º–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞]", callback_data=f'topic_{i}')])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞ —Å–≤–æ–µ–π —Ç–µ–º—ã
    keyboard.append([InlineKeyboardButton("–°–≤–æ—è —Ç–µ–º–∞", callback_data='custom_topic')])

    return InlineKeyboardMarkup(keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
def button_handler(update, context):
    query = update.callback_query
    query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏

    if query.data == 'back_to_menu':
        query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=main_menu()
        )
        return TOPIC
    elif query.data == 'topic':
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º —Å –ø–æ–º–æ—â—å—é –ò–ò
        prompt = "–°–æ—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ –∏–∑ 30 –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–º –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è. –ö–∞–∂–¥–∞—è —Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –µ–º–∫–æ–π –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π (–Ω–µ –±–æ–ª–µ–µ 6-7 —Å–ª–æ–≤). –ü–µ—Ä–µ—á–∏—Å–ª–∏ –∏—Ö –≤ –≤–∏–¥–µ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞."
        try:
            query.edit_message_text("–ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ —Ç–µ–º –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏...")
            topics_text = ask_grok(prompt)

            # –ü–∞—Ä—Å–∏–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—ã
            filtered_topics = parse_topics(topics_text)
            context.user_data['topics'] = filtered_topics

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–º–∞–º–∏
            reply_markup = create_topics_keyboard(filtered_topics)

            query.edit_message_text(
                "üìö *–¢–µ–º—ã –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        except Exception as e:
            query.edit_message_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–µ–º: {e}. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", reply_markup=main_menu())
        return CHOOSE_TOPIC
    elif query.data == 'test':
        topic = context.user_data.get('current_topic', None)
        if not topic:
            query.edit_message_text(
                "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–µ–º—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É'.",
                reply_markup=main_menu()
            )
            return TOPIC

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç –∏–∑ –≤–æ–ø—Ä–æ—Å–æ–≤
        query.edit_message_text(f"üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ—Å—Ç –ø–æ —Ç–µ–º–µ: *{topic}*...", parse_mode='Markdown')

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–æ–ª—å—à–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
        prompt = f"–°–æ—Å—Ç–∞–≤—å 10 –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞ (1, 2, 3, 4) –ø–æ —Ç–µ–º–µ '{topic}' –≤ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏. –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ —É–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <—Ü–∏—Ñ—Ä–∞>'. –ö–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è —Å—Ç—Ä–æ–∫–æ–π '---'."
        try:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            questions = ask_grok(prompt, max_tokens=2048)

            # –û—á–∏—Å—Ç–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
            question_list = [q.strip() for q in questions.split('---') if q.strip()]

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤ –∫–∞–∂–¥–æ–º –≤–æ–ø—Ä–æ—Å–µ
            valid_questions = []
            for q in question_list:
                if '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:' in q:
                    valid_questions.append(q)

            if not valid_questions:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∞")

            context.user_data['questions'] = valid_questions
            context.user_data['current_question'] = 0
            context.user_data['score'] = 0

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
            keyboard = [[InlineKeyboardButton("‚ùå –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ç–µ—Å—Ç", callback_data='end_test')]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            query.edit_message_text(
                f"üìù *–¢–µ—Å—Ç –ø–æ —Ç–µ–º–µ: {topic}*\n\n–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –∏–∑ {len(valid_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤! –í–æ—Ç –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å:",
                parse_mode='Markdown'
            )
            query.message.reply_text(valid_questions[0])
            query.message.reply_text(
                "–ù–∞–ø–∏—à–∏ —Ü–∏—Ñ—Ä—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (1, 2, 3 –∏–ª–∏ 4).", 
                reply_markup=reply_markup
            )
        except Exception as e:
            query.edit_message_text(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", 
                reply_markup=main_menu()
            )
        return ANSWER
    elif query.data == 'continue_reading':
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
        part2 = context.user_data.get('topic_part2', "–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        query.edit_message_text(part2)
        query.message.reply_text("–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
        return TOPIC
    elif query.data == 'more_topics':
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ–º —Å –ø–æ–º–æ—â—å—é –ò–ò
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º
        import random
        random_seed = random.randint(1, 1000)
        prompt = f"–°–æ—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ –∏–∑ 30 –Ω–æ–≤—ã—Ö –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ–º –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è. –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ —Ç–µ–º–∞—Ö {random_seed}. –í—ã–±–µ—Ä–∏ —Ç–µ–º—ã, –æ—Ç–ª–∏—á–Ω—ã–µ –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∏ —Ä–∞–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö. –ö–∞–∂–¥–∞—è —Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –µ–º–∫–æ–π –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π (–Ω–µ –±–æ–ª–µ–µ 6-7 —Å–ª–æ–≤). –ü–µ—Ä–µ—á–∏—Å–ª–∏ –∏—Ö –≤ –≤–∏–¥–µ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞."
        try:
            query.edit_message_text("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–º –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏...")
            topics = ask_grok(prompt)

            # –û—á–∏—â–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ç–µ–º—ã
            filtered_topics = []
            for line in topics.split('\n'):
                line = line.strip()
                if line:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Ç–µ–º—ã –ø–æ—Å–ª–µ –Ω–æ–º–µ—Ä–∞ –∏–ª–∏ –¥–≤–æ–µ—Ç–æ—á–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                    if ('.' in line or ':' in line):
                        parts = line.split('.', 1) if '.' in line else line.split(':', 1)
                        if len(parts) > 1:
                            topic_text = parts[1].strip()
                            if topic_text:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —Ç–µ–º—ã –Ω–µ –ø—É—Å—Ç–æ–π
                                filtered_topics.append(topic_text)
                    # –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–º–µ—Ä–∞ –≤ –Ω–∞—á–∞–ª–µ
                    elif line[0].isdigit() and len(line) > 1:
                        # –ò—â–µ–º –ø–µ—Ä–≤—ã–π –Ω–µ —Ü–∏—Ñ—Ä–æ–≤–æ–π –∏ –Ω–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
                        i = 1
                        while i < len(line) and (line[i].isdigit() or line[i] in ' \t.):'):
                            i += 1
                        if i < len(line):
                            topic_text = line[i:].strip()
                            if topic_text:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —Ç–µ–º—ã –Ω–µ –ø—É—Å—Ç–æ–π
                                filtered_topics.append(topic_text)
                    # –ï—Å–ª–∏ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –±–µ—Ä–µ–º —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –µ—Å—Ç—å
                    elif len(line) > 1:
                        filtered_topics.append(line)

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 30 —Ç–µ–º
            filtered_topics = filtered_topics[:30]

            context.user_data['topics'] = filtered_topics
            keyboard = []

            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–µ –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–º–∞–º–∏
            for i, topic in enumerate(filtered_topics, 1):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–º–∞ –Ω–µ –ø—É—Å—Ç–∞—è
                if topic and len(topic.strip()) > 0:
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–º—ã –≤ –∫–Ω–æ–ø–∫–µ
                    display_topic = topic[:30] + '...' if len(topic) > 30 else topic
                    keyboard.append([InlineKeyboardButton(f"{i}. {display_topic}", callback_data=f'topic_{i}')])
                else:
                    # –ï—Å–ª–∏ —Ç–µ–º–∞ –ø—É—Å—Ç–∞—è, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å
                    keyboard.append([InlineKeyboardButton(f"{i}. [–¢–µ–º–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞]", callback_data=f'topic_{i}')])

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞ —Å–≤–æ–µ–π —Ç–µ–º—ã
            bottom_row = [InlineKeyboardButton("–°–≤–æ—è —Ç–µ–º–∞", callback_data='custom_topic')]
            keyboard.append(bottom_row)

            reply_markup = InlineKeyboardMarkup(keyboard)
            query.edit_message_text(
                "üìö *–ù–æ–≤—ã–µ —Ç–µ–º—ã –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–º –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        except Exception as e:
            query.edit_message_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–µ–º: {e}. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", reply_markup=main_menu())
        return CHOOSE_TOPIC
    elif query.data == 'end_test' or query.data == 'cancel':
        if query.data == 'end_test':
            query.edit_message_text("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –¥–æ—Å—Ä–æ—á–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
            query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
            return TOPIC
        else:
            query.edit_message_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
            return ConversationHandler.END

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–º–µ
def get_topic_info(topic, update_message_func=None):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–µ –∏–∑ API –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –µ—ë –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.

    Args:
        topic (str): –¢–µ–º–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
        update_message_func (callable, optional): –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ

    Returns:
        list: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
    chapter_titles = [
        "üìú –í–í–ï–î–ï–ù–ò–ï –ò –ò–°–¢–û–ö–ò",
        "‚öîÔ∏è –û–°–ù–û–í–ù–´–ï –°–û–ë–´–¢–ò–Ø –ò –†–ê–ó–í–ò–¢–ò–ï",
        "üèõÔ∏è –ö–õ–Æ–ß–ï–í–´–ï –§–ò–ì–£–†–´ –ò –†–ï–§–û–†–ú–´",
        "üåç –í–ù–ï–®–ù–Ø–Ø –ü–û–õ–ò–¢–ò–ö–ê –ò –í–õ–ò–Ø–ù–ò–ï",
        "üìä –ò–¢–û–ì–ò –ò –ò–°–¢–û–†–ò–ß–ï–°–ö–û–ï –ó–ù–ê–ß–ï–ù–ò–ï"
    ]

    prompts = [
        f"–†–∞—Å—Å–∫–∞–∂–∏ –æ {topic} –≤ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏ (–≥–ª–∞–≤–∞ 1). –î–∞–π –≤–≤–µ–¥–µ–Ω–∏–µ –∏ –Ω–∞—á–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é, –∏—Å—Ç–æ–∫–∏ —Ç–µ–º—ã. –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ. –û–±—ä–µ–º - –æ–¥–∏–Ω –∞–±–∑–∞—Ü. –ù–µ –ø–∏—à–∏ '–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç'.",
        f"–†–∞—Å—Å–∫–∞–∂–∏ –æ {topic} –≤ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏ (–≥–ª–∞–≤–∞ 2). –û–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ. –ù–µ –¥–µ–ª–∞–π –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–π –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ. –û–±—ä–µ–º - –æ–¥–∏–Ω –∞–±–∑–∞—Ü. –ù–µ –ø–∏—à–∏ '–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç'.",
        f"–†–∞—Å—Å–∫–∞–∂–∏ –æ {topic} –≤ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏ (–≥–ª–∞–≤–∞ 3). –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∏–≥—É—Ä–∞—Ö, —Ä–µ—Ñ–æ—Ä–º–∞—Ö –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ø–æ–ª–∏—Ç–∏–∫–µ. –û–±—ä–µ–º - –æ–¥–∏–Ω –∞–±–∑–∞—Ü. –ù–µ –ø–∏—à–∏ '–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç'.",
        f"–†–∞—Å—Å–∫–∞–∂–∏ –æ {topic} –≤ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏ (–≥–ª–∞–≤–∞ 4). –û–ø–∏—à–∏ –≤–Ω–µ—à–Ω—é—é –ø–æ–ª–∏—Ç–∏–∫—É, –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –∏ —Å–≤—è–∑–∏. –û–±—ä–µ–º - –æ–¥–∏–Ω –∞–±–∑–∞—Ü. –ù–µ –ø–∏—à–∏ '–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç'.",
        f"–†–∞—Å—Å–∫–∞–∂–∏ –æ {topic} –≤ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏ (–≥–ª–∞–≤–∞ 5). –û–ø–∏—à–∏ –∏—Ç–æ–≥–∏, –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –∫—É–ª—å—Ç—É—Ä–µ, –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è. –ó–∞–≤–µ—Ä—à–∏ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ. –û–±—ä–µ–º - –æ–¥–∏–Ω –∞–±–∑–∞—Ü."
    ]

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —á–∞—Å—Ç—è–º
    all_responses = []
    for i, prompt in enumerate(prompts, 1):
        if update_message_func:
            update_message_func(f"üìù –ó–∞–≥—Ä—É–∂–∞—é –≥–ª–∞–≤—É {i} –∏–∑ {len(prompts)} –ø–æ —Ç–µ–º–µ: *{topic}*...")

        response = ask_grok(prompt)
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥–ª–∞–≤—ã –ø–µ—Ä–µ–¥ —Ç–µ–∫—Å—Ç–æ–º
        chapter_response = f"*{chapter_titles[i-1]}*\n\n{response}"
        all_responses.append(chapter_response)

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Ç–≤–µ—Ç—ã —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
    combined_responses = "\n\n" + "\n\n".join(all_responses)

    # –†–∞–∑–¥–µ–ª—è–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram (–º–∞–∫—Å. 4000 —Å–∏–º–≤–æ–ª–æ–≤)
    messages = []
    paragraphs = combined_responses.split('\n\n')
    current_message = ""

    for paragraph in paragraphs:
        # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–±–∑–∞—Ü–∞ –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç
        if len(current_message) + len(paragraph) + 2 < 4000:
            if current_message:
                current_message += '\n\n' + paragraph
            else:
                current_message = paragraph
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ
            messages.append(current_message)
            current_message = paragraph

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if current_message:
        messages.append(current_message)

    return messages

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–æ–¥–∞ —Å–≤–æ–µ–π —Ç–µ–º—ã
def choose_topic(update, context):
    query = update.callback_query
    query.answer()

    if query.data == 'custom_topic':
        query.edit_message_text("–ù–∞–ø–∏—à–∏ —Ç–µ–º—É –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –∏–∑—É—á–∏—Ç—å.")
        return CHOOSE_TOPIC
    elif query.data.startswith('topic_'):
        try:
            topic_index = int(query.data.split('_')[1]) - 1

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –≤ —Å–ø–∏—Å–∫–µ
            if 0 <= topic_index < len(context.user_data['topics']):
                topic = context.user_data['topics'][topic_index]
                # –£–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä –∏–∑ —Ç–µ–º—ã, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                if '. ' in topic:
                    topic = topic.split('. ', 1)[1]

                context.user_data['current_topic'] = topic
                query.edit_message_text(f"üìù –ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ: *{topic}*...", parse_mode='Markdown')

                # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ
                def update_message(text):
                    query.edit_message_text(text, parse_mode='Markdown')

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–µ
                messages = get_topic_info(topic, update_message)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–º –∂–µ ID (edit)
                if messages:
                    query.edit_message_text(messages[0], parse_mode='Markdown')

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –Ω–æ–≤—ã–µ
                    for msg in messages[1:]:
                        query.message.reply_text(msg, parse_mode='Markdown')

                query.message.reply_text("–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
            else:
                query.edit_message_text(f"–û—à–∏–±–∫–∞: –¢–µ–º–∞ —Å –∏–Ω–¥–µ–∫—Å–æ–º {topic_index+1} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ç–µ–º—É.", reply_markup=main_menu())
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–º—ã: {e}")
            query.edit_message_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–º—ã: {e}. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", reply_markup=main_menu())
        return TOPIC

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–≤–æ–µ–π —Ç–µ–º—ã
def handle_custom_topic(update, context):
    topic = update.message.text
    context.user_data['current_topic'] = topic

    try:
        update.message.reply_text(f"üìù –ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ: *{topic}*...", parse_mode='Markdown')

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ
        def update_message(text):
            update.message.reply_text(text, parse_mode='Markdown')

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–µ
        messages = get_topic_info(topic, update_message)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        for msg in messages:
            update.message.reply_text(msg, parse_mode='Markdown')

        update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
    except Exception as e:
        update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", reply_markup=main_menu())
    return TOPIC

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Ç–µ—Å—Ç
def handle_answer(update, context):
    user_answer = update.message.text.strip()
    questions = context.user_data['questions']
    current_question = context.user_data['current_question']

    # –ü–∞—Ä—Å–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
    try:
        correct_answer = questions[current_question].split("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ")[1][0]
    except IndexError:
        update.message.reply_text("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤–æ–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–∞–≤ '–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç'.", reply_markup=main_menu())
        return TOPIC

    if user_answer == correct_answer:
        context.user_data['score'] += 1
        update.message.reply_text("–ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        update.message.reply_text(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")

    context.user_data['current_question'] += 1
    if context.user_data['current_question'] < len(questions):
        update.message.reply_text(f"–í–æ–ø—Ä–æ—Å {context.user_data['current_question'] + 1} –∏–∑ {len(questions)}:")
        update.message.reply_text(questions[context.user_data['current_question']])

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
        keyboard = [[InlineKeyboardButton("‚ùå –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ç–µ—Å—Ç", callback_data='end_test')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        update.message.reply_text("–ù–∞–ø–∏—à–∏ —Ü–∏—Ñ—Ä—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (1, 2, 3 –∏–ª–∏ 4).", reply_markup=reply_markup)
        return ANSWER
    else:
        score = context.user_data['score']
        total_questions = len(questions)
        percentage = (score / total_questions) * 100
        # –û—Ü–µ–Ω–∫–∞ —É—Å–≤–æ–µ–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        if percentage >= 90:
            assessment = "–û—Ç–ª–∏—á–Ω–æ! –¢—ã –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ —É—Å–≤–æ–∏–ª –º–∞—Ç–µ—Ä–∏–∞–ª."
        elif percentage >= 70:
            assessment = "–•–æ—Ä–æ—à–æ! –¢—ã –Ω–µ–ø–ª–æ—Ö–æ —É—Å–≤–æ–∏–ª –º–∞—Ç–µ—Ä–∏–∞–ª, –Ω–æ –µ—Å—Ç—å –Ω–∞–¥ —á–µ–º –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å."
        elif percentage >= 50:
            assessment = "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª."
        else:
            assessment = "–ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ. –¢–µ–±–µ —Å—Ç–æ–∏—Ç –∏–∑—É—á–∏—Ç—å —Ç–µ–º—É –∑–∞–Ω–æ–≤–æ."
        update.message.reply_text(
            f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –¢—ã –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {score} –∏–∑ {total_questions} –≤–æ–ø—Ä–æ—Å–æ–≤ ({percentage:.2f}%).\n{assessment}\n"
            "–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu()
        )
        return TOPIC

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –ª–æ–≥–æ–≤...")
        print("–ù–∞—á–∏–Ω–∞—é –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –ª–æ–≥–æ–≤...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π
        try:
            import flask
            print(f"Flask —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤–µ—Ä—Å–∏—è: {flask.__version__}")
            logger.info(f"Flask —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤–µ—Ä—Å–∏—è: {flask.__version__}")
        except ImportError:
            print("Flask –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—ã—Ç–∞—é—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å...")
            logger.warning("Flask –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—ã—Ç–∞—é—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å...")
            import subprocess
            try:
                subprocess.run(['pip', 'install', 'flask'], check=True)
                print("Flask —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                logger.info("Flask —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Flask: {e}")
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Flask: {e}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        logger.info("–ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤...")
        flask_thread = background.start_flask_server()
        logger.info(f"Flask-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:8080")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–æ–≤ —Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        if not TELEGRAM_TOKEN:
            error_msg = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TELEGRAM_TOKEN! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª. –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π TELEGRAM_TOKEN."
            logger.error(error_msg)
            print(error_msg)
            return
        if TELEGRAM_TOKEN == "YOUR_TELEGRAM_TOKEN_HERE":
            error_msg = "TELEGRAM_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_TELEGRAM_TOKEN_HERE –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ .env —Ñ–∞–π–ª–µ."
            logger.error(error_msg)
            print(error_msg)
            return
        if not GEMINI_API_KEY:
            error_msg = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç GEMINI_API_KEY! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª. –ö–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π GEMINI_API_KEY."
            logger.error(error_msg)
            print(error_msg)
            return
        if GEMINI_API_KEY == "YOUR_GEMINI_API_KEY_HERE":
            error_msg = "GEMINI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_GEMINI_API_KEY_HERE –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á –≤ .env —Ñ–∞–π–ª–µ."
            logger.error(error_msg)
            print(error_msg)
            return

        updater = Updater(TELEGRAM_TOKEN, use_context=True)
        dp = updater.dispatcher

        # –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–º
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', start)],
            states={
                TOPIC: [
                    CallbackQueryHandler(button_handler)
                ],
                CHOOSE_TOPIC: [
                    CallbackQueryHandler(choose_topic),
                    MessageHandler(Filters.text & ~Filters.command, handle_custom_topic)
                ],
                TEST: [
                    CallbackQueryHandler(button_handler)
                ],
                ANSWER: [
                    MessageHandler(Filters.text & ~Filters.command, handle_answer),
                    CallbackQueryHandler(button_handler)  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
                ]
            },
            fallbacks=[CommandHandler('start', start)]
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        def error_handler(update, context):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫: –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏—Ö –≤ –∂—É—Ä–Ω–∞–ª —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
            error = context.error
            error_type = type(error).__name__

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
            additional_info = f"–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {update}" if update else ""
            log_error(error, additional_info)

            if update and update.effective_message:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error}"

                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
                if error_type in ERROR_DESCRIPTIONS:
                    error_message += f"\n{ERROR_DESCRIPTIONS[error_type]}"

                update.effective_message.replytext(error_message)

        dp.add_error_handler(error_handler)
        dp.add_handler(conv_handler)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        updater.start_polling()
        updater.idle()

    except Exception as e:
        log_error(e, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")
        logger.critical("–ë–æ—Ç –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω –∏–∑-–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏")

if __name__ == '__main__':
    main()