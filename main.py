
import os
import json
import time
import logging
import requests
from dotenv import load_dotenv
import google.generativeai as genai
from telegram import Update, ParseMode, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, CallbackQueryHandler

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler(f"logs/bot_log_{time.strftime('%Y%m%d')}.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Gemini
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel('gemini-pro')

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs('logs', exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ API
CACHE_FILE = "api_cache.json"

def load_cache():
    try:
        if os.path.exists(CACHE_FILE):
            with open(CACHE_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞: {e}")
    return {}

def save_cache(cache):
    try:
        with open(CACHE_FILE, 'w', encoding='utf-8') as f:
            json.dump(cache, f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞: {e}")

def get_cached_response(prompt, ttl=86400):  # TTL –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 24 —á–∞—Å–∞)
    cache = load_cache()
    cache_key = hash_string(prompt)
    
    if cache_key in cache:
        entry = cache[cache_key]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞
        if time.time() - entry.get("last_accessed", 0) < entry.get("ttl", ttl):
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            cache[cache_key]["last_accessed"] = time.time()
            save_cache(cache)
            return entry["value"]
    
    return None

def cache_response(prompt, response, ttl=86400):
    cache = load_cache()
    cache_key = hash_string(prompt)
    
    cache[cache_key] = {
        "value": response,
        "last_accessed": time.time(),
        "created_at": time.time(),
        "ttl": ttl
    }
    
    save_cache(cache)

def hash_string(text):
    import hashlib
    return hashlib.md5(text.encode('utf-8')).hexdigest()

def generate_history_response(prompt):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –∫ API
        cached_response = get_cached_response(prompt)
        if cached_response:
            return cached_response
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é —Ç–µ–º–∞—Ç–∏–∫—É
        context_prompt = (
            "–¢—ã –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏. "
            "–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –†–æ—Å—Å–∏–∏. "
            "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏, –≤–µ–∂–ª–∏–≤–æ –æ–±—ä—è—Å–Ω–∏, —á—Ç–æ "
            "—Ç—ã –º–æ–∂–µ—à—å –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ –†–æ—Å—Å–∏–∏."
        )
        
        # –ü–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        full_prompt = f"{context_prompt}\n\n–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {prompt}"
        
        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        response = model.generate_content(full_prompt)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        response_text = response.text
        
        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cache_response(prompt, response_text)
        
        return response_text
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [
        [InlineKeyboardButton("–¢–µ–º—ã –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏", callback_data='history_topics')],
        [InlineKeyboardButton("–û –ø—Ä–æ–µ–∫—Ç–µ", callback_data='about')],
        [InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data='help')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞!\n\n"
        "–Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏ –∏ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã "
        "–ø–æ —ç—Ç–æ–π —Ç–µ–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.",
        reply_markup=reply_markup
    )

def button_callback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    query.answer()
    
    if query.data == 'history_topics':
        response = generate_history_response("–ü—Ä–µ–¥–ª–æ–∂–∏ —Å–ø–∏—Å–æ–∫ –∏–∑ 30 –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–º –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è")
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã (–ø–µ—Ä–≤—ã–µ 5 —Ç–µ–º)
        topics = [topic.strip() for topic in response.split('\n') if topic.strip() and not topic.strip().startswith('–í–æ—Ç')]
        
        keyboard = []
        for i, topic in enumerate(topics[:5]):
            # –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            clean_topic = topic
            if '.' in topic[:3]:
                clean_topic = topic.split('.', 1)[1].strip()
            keyboard.append([InlineKeyboardButton(clean_topic, callback_data=f'topic_{i+1}')])
        
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )
    
    elif query.data.startswith('topic_'):
        topic_id = int(query.data.split('_')[1])
        response = generate_history_response("–ü—Ä–µ–¥–ª–æ–∂–∏ —Å–ø–∏—Å–æ–∫ –∏–∑ 30 –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–º –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è")
        topics = [topic.strip() for topic in response.split('\n') if topic.strip() and not topic.strip().startswith('–í–æ—Ç')]
        
        if topic_id <= len(topics):
            selected_topic = topics[topic_id-1]
            if '.' in selected_topic[:3]:
                selected_topic = selected_topic.split('.', 1)[1].strip()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ
            topic_info = generate_history_response(f"–†–∞—Å—Å–∫–∞–∂–∏ –æ —Ç–µ–º–µ '{selected_topic}' –≤ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏")
            
            keyboard = [
                [InlineKeyboardButton("–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ", callback_data=f'more_{topic_id}')],
                [InlineKeyboardButton("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Ç–µ–º–µ", callback_data=f'test_{topic_id}')],
                [InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", callback_data='history_topics')],
                [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            query.edit_message_text(
                text=f"*{selected_topic}*\n\n{topic_info[:800]}...",
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
    
    elif query.data.startswith('more_'):
        topic_id = int(query.data.split('_')[1])
        response = generate_history_response("–ü—Ä–µ–¥–ª–æ–∂–∏ —Å–ø–∏—Å–æ–∫ –∏–∑ 30 –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–º –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è")
        topics = [topic.strip() for topic in response.split('\n') if topic.strip() and not topic.strip().startswith('–í–æ—Ç')]
        
        if topic_id <= len(topics):
            selected_topic = topics[topic_id-1]
            if '.' in selected_topic[:3]:
                selected_topic = selected_topic.split('.', 1)[1].strip()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            additional_info = generate_history_response(f"–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–Ω–µ—à–Ω–µ–π –ø–æ–ª–∏—Ç–∏–∫–µ –∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º –≤–ª–∏—è–Ω–∏–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ç–µ–º—ã '{selected_topic}' –≤ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏")
            
            keyboard = [
                [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–µ–º–µ", callback_data=f'topic_{topic_id}')],
                [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            query.edit_message_text(
                text=f"*{selected_topic}: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*\n\n{additional_info[:800]}...",
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
    
    elif query.data.startswith('test_'):
        topic_id = int(query.data.split('_')[1])
        response = generate_history_response("–ü—Ä–µ–¥–ª–æ–∂–∏ —Å–ø–∏—Å–æ–∫ –∏–∑ 30 –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–º –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è")
        topics = [topic.strip() for topic in response.split('\n') if topic.strip() and not topic.strip().startswith('–í–æ—Ç')]
        
        if topic_id <= len(topics):
            selected_topic = topics[topic_id-1]
            if '.' in selected_topic[:3]:
                selected_topic = selected_topic.split('.', 1)[1].strip()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ
            test_prompt = f"–ü—Ä–∏–¥—É–º–∞–π 15 –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ —Ç–µ–º–µ \"{selected_topic}\" –≤ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —É–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç."
            test_questions = generate_history_response(test_prompt)
            
            keyboard = [
                [InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–µ–º–µ", callback_data=f'topic_{topic_id}')],
                [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            if len(test_questions) > 4000:
                parts = [test_questions[i:i+4000] for i in range(0, len(test_questions), 4000)]
                query.edit_message_text(
                    text=f"*–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Ç–µ–º–µ: {selected_topic}*\n\n–ß–∞—Å—Ç—å 1:\n\n{parts[0]}...",
                    reply_markup=reply_markup,
                    parse_mode=ParseMode.MARKDOWN
                )
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                for i, part in enumerate(parts[1:], 2):
                    context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text=f"–ß–∞—Å—Ç—å {i}:\n\n{part}",
                        parse_mode=ParseMode.MARKDOWN
                    )
            else:
                query.edit_message_text(
                    text=f"*–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Ç–µ–º–µ: {selected_topic}*\n\n{test_questions}",
                    reply_markup=reply_markup,
                    parse_mode=ParseMode.MARKDOWN
                )
    
    elif query.data == 'about':
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(
            text=(
                "*–û –ø—Ä–æ–µ–∫—Ç–µ*\n\n"
                "–≠—Ç–æ—Ç –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥–µ–ª—å Gemini –æ—Ç Google –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏. "
                "–û–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö, –ª–∏—á–Ω–æ—Å—Ç—è—Ö –∏ –ø–µ—Ä–∏–æ–¥–∞—Ö "
                "—Ä–æ—Å—Å–∏–π—Å–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏.\n\n"
                "–ë–æ—Ç –∏–º–µ–µ—Ç —Å–∏—Å—Ç–µ–º—É –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –≤–æ–ø—Ä–æ—Å—ã "
                "–∏ –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π."
            ),
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    elif query.data == 'help':
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(
            text=(
                "*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n\n"
                "1. –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏\n"
                "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–¢–µ–º—ã –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏' –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö —Ç–µ–º\n"
                "3. –î–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç—ã\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:\n"
                "‚Ä¢ –ö–æ–≥–¥–∞ –±—ã–ª–∞ –ö—É–ª–∏–∫–æ–≤—Å–∫–∞—è –±–∏—Ç–≤–∞?\n"
                "‚Ä¢ –†–∞—Å—Å–∫–∞–∂–∏ –æ –ü–µ—Ç—Ä–µ I\n"
                "‚Ä¢ –ß—Ç–æ —Ç–∞–∫–æ–µ –°–º—É—Ç–Ω–æ–µ –≤—Ä–µ–º—è?\n"
                "‚Ä¢ –ü—Ä–∏—á–∏–Ω—ã —Ä–µ–≤–æ–ª—é—Ü–∏–∏ 1917 –≥–æ–¥–∞"
            ),
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    elif query.data == 'back_to_menu':
        keyboard = [
            [InlineKeyboardButton("–¢–µ–º—ã –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏", callback_data='history_topics')],
            [InlineKeyboardButton("–û –ø—Ä–æ–µ–∫—Ç–µ", callback_data='about')],
            [InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data='help')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(
            text=(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞!\n\n"
                "–Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏ –∏ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã "
                "–ø–æ —ç—Ç–æ–π —Ç–µ–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å."
            ),
            reply_markup=reply_markup
        )

def handle_message(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
    if user_text.startswith('/'):
        update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    context.bot.send_chat_action(chat_id=update.effective_chat.id, action='typing')
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = generate_history_response(user_text)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = [
        [InlineKeyboardButton("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç", callback_data='extended_' + hash_string(user_text)[:10])],
        [InlineKeyboardButton("–ú–µ–Ω—é", callback_data='back_to_menu')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    update.message.reply_text(
        response,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

def error_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {update}: {context.error}")
    
    try:
        # –ï—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if update and update.effective_chat:
            context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
        updater = Updater(TELEGRAM_TOKEN)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        dispatcher = updater.dispatcher
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        dispatcher.add_handler(CommandHandler("start", start))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        dispatcher.add_handler(CallbackQueryHandler(button_callback))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        dispatcher.add_error_handler(error_handler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        updater.start_polling()
        
        # –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–∫–∞ –Ω–µ –Ω–∞–∂–º–µ–º Ctrl-C
        updater.idle()
    
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()
