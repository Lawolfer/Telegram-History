
import sys
import os
import unittest
from unittest.mock import MagicMock, patch

# Add path to project root
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from src.ui_manager import UIManager
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

class TestUIManager(unittest.TestCase):
    
    def setUp(self):
        """Set up test environment"""
        self.mock_logger = MagicMock()
        self.ui_manager = UIManager(self.mock_logger)
    
    def test_create_main_menu(self):
        """Test creating main menu keyboard"""
        # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥
        keyboard = self.ui_manager.create_main_menu()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.assertIsInstance(keyboard, InlineKeyboardMarkup)
        self.assertTrue(len(keyboard.inline_keyboard) > 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é
        button_texts = []
        for row in keyboard.inline_keyboard:
            for button in row:
                button_texts.append(button.text)
        
        self.assertIn("üìö –ò–∑—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é —Ç–µ–º—É", button_texts)
        self.assertIn("üß† –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–Ω–∞–Ω–∏—è", button_texts)
        self.assertIn("üí¨ –ë–µ—Å–µ–¥–∞", button_texts)
    
    def test_create_topics_keyboard(self):
        """Test creating topics keyboard"""
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        topics = ["–¢–µ–º–∞ 1", "–¢–µ–º–∞ 2", "–¢–µ–º–∞ 3", "–¢–µ–º–∞ 4", "–¢–µ–º–∞ 5", "–¢–µ–º–∞ 6"]
        
        # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥
        keyboard = self.ui_manager.create_topics_keyboard(topics)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.assertIsInstance(keyboard, InlineKeyboardMarkup)
        self.assertTrue(len(keyboard.inline_keyboard) > 0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ç–µ–º—ã –µ—Å—Ç—å –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
        button_data = []
        for row in keyboard.inline_keyboard:
            for button in row:
                button_data.append((button.text, button.callback_data))
        
        for topic in topics:
            self.assertTrue(any(topic in text for text, data in button_data))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        back_buttons = [button for row in keyboard.inline_keyboard for button in row if 'üîô' in button.text]
        self.assertEqual(len(back_buttons), 1)
    
    def test_create_pagination_keyboard(self):
        """Test creating pagination keyboard"""
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        items = [f"Item {i}" for i in range(1, 21)]
        page = 1
        page_size = 5
        callback_prefix = "test"
        
        # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥
        keyboard = self.ui_manager.create_pagination_keyboard(items, page, page_size, callback_prefix)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.assertIsInstance(keyboard, InlineKeyboardMarkup)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        navigation_buttons = []
        for row in keyboard.inline_keyboard:
            for button in row:
                if button.callback_data.startswith(f"{callback_prefix}_page"):
                    navigation_buttons.append(button)
        
        # –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        self.assertTrue(any("‚û°Ô∏è" in button.text for button in navigation_buttons))
        
        # –ù–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        self.assertFalse(any("‚¨ÖÔ∏è" in button.text for button in navigation_buttons))
    
    def test_format_message_with_markdown(self):
        """Test markdown formatting"""
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        raw_text = "–≠—Ç–æ *–≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π* —Ç–µ–∫—Å—Ç —Å _–∫—É—Ä—Å–∏–≤–æ–º_ –∏ `–∫–æ–¥–æ–º`"
        
        # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥
        formatted_text = self.ui_manager.format_message_with_markdown(raw_text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±–µ—Ä–Ω—É—Ç –≤ try-except –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.assertIsInstance(formatted_text, str)
        self.assertIn("*–≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π*", formatted_text)
        self.assertIn("_–∫—É—Ä—Å–∏–≤–æ–º_", formatted_text)
        self.assertIn("`–∫–æ–¥–æ–º`", formatted_text)

if __name__ == '__main__':
    unittest.main()
