import re
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

class UIManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –±–æ—Ç–∞"""

    def __init__(self, logger):
        self.logger = logger

    def get_main_menu_keyboard(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("–ò–∑—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏", callback_data="topic")],
            [InlineKeyboardButton("–¢–µ—Å—Ç—ã", callback_data="test")],
            [InlineKeyboardButton("–ë–µ—Å–µ–¥–∞ —Å –±–æ—Ç–æ–º", callback_data="conversation")]
        ]
        return InlineKeyboardMarkup(keyboard)

    def get_topics_keyboard(self, page=0):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ —Ç–µ–º–∞–º–∏"""
        topics = [
            "–î—Ä–µ–≤–Ω—è—è –†—É—Å—å", "–ö–∏–µ–≤—Å–∫–∞—è –†—É—Å—å", "–ú–æ–Ω–≥–æ–ª—å—Å–∫–æ–µ –∏–≥–æ",
            "–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —Ü–∞—Ä—Å—Ç–≤–æ", "–†–æ—Å—Å–∏–π—Å–∫–∞—è –∏–º–ø–µ—Ä–∏—è", "–†–µ–≤–æ–ª—é—Ü–∏—è 1917",
            "–°–°–°–†", "–í–µ–ª–∏–∫–∞—è –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≤–æ–π–Ω–∞", "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –†–æ—Å—Å–∏—è"
        ]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        topics_per_page = 3
        start_idx = page * topics_per_page
        end_idx = min(start_idx + topics_per_page, len(topics))

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []
        for i in range(start_idx, end_idx):
            keyboard.append([InlineKeyboardButton(topics[i], callback_data=f"topic_{topics[i]}")])

        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page-1}"))
        if end_idx < len(topics):
            nav_buttons.append(InlineKeyboardButton("–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"page_{page+1}"))
        if nav_buttons:
            keyboard.append(nav_buttons)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard.append([InlineKeyboardButton("–°–≤–æ—è —Ç–µ–º–∞", callback_data="custom_topic")])
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")])

        return InlineKeyboardMarkup(keyboard)

    def get_test_keyboard(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
        keyboard = [
            [InlineKeyboardButton("–õ—ë–≥–∫–∏–π —Ç–µ—Å—Ç", callback_data="test_easy")],
            [InlineKeyboardButton("–°—Ä–µ–¥–Ω–∏–π —Ç–µ—Å—Ç", callback_data="test_medium")],
            [InlineKeyboardButton("–°–ª–æ–∂–Ω—ã–π —Ç–µ—Å—Ç", callback_data="test_hard")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]
        return InlineKeyboardMarkup(keyboard)

    def get_back_to_menu_keyboard(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é"""
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
        return InlineKeyboardMarkup(keyboard)

    def format_message(self, text, max_length=4000):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞–∑–±–∏–≤–∞—è –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ"""
        if len(text) <= max_length:
            return [text]

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ –∞–±–∑–∞—Ü–∞–º
        parts = []
        current_part = ""
        paragraphs = text.split("\n\n")

        for paragraph in paragraphs:
            if len(current_part) + len(paragraph) + 2 <= max_length:
                if current_part:
                    current_part += "\n\n"
                current_part += paragraph
            else:
                if current_part:
                    parts.append(current_part)
                current_part = paragraph

        if current_part:
            parts.append(current_part)

        return parts
        
    def parse_topics(self, topics_text):
        """–ü–∞—Ä—Å–∏—Ç –∏ –æ—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–º –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–º
        import re
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "1. –¢–µ–º–∞" –∏–ª–∏ "1) –¢–µ–º–∞"
        topics_match = re.findall(r'\d+[\.\)]\s*([^\n]+)', topics_text)
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–º—ã –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
        filtered_topics = []
        for topic in topics_match:
            # –£–¥–∞–ª—è–µ–º –∫–∞–≤—ã—á–∫–∏, —Ç–æ—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            cleaned_topic = topic.strip(' "\'.,;').strip()
            if cleaned_topic:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–º–∞ –Ω–µ –ø—É—Å—Ç–∞—è
                filtered_topics.append(cleaned_topic)
                
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–µ–º —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–±–∏—Ç—å –ø–æ —Å—Ç—Ä–æ–∫–∞–º
        if not filtered_topics:
            lines = topics_text.strip().split('\n')
            for line in lines:
                # –ß–∏—Å—Ç–∏–º —Å—Ç—Ä–æ–∫—É –æ—Ç –Ω–æ–º–µ—Ä–æ–≤, –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
                clean_line = re.sub(r'^\d+[\.\)]\s*', '', line).strip(' "\'.,;').strip()
                if clean_line:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è
                    filtered_topics.append(clean_line)
        
        self.logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ {len(filtered_topics)} —Ç–µ–º")
        return filtered_topics
    
    def create_topics_keyboard(self, topics):
        """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–º–∞–º–∏ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è"""
        keyboard = []
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        max_topics = min(20, len(topics))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: –ø–æ –æ–¥–Ω–æ–π —Ç–µ–º–µ –Ω–∞ —Å—Ç—Ä–æ–∫—É
        for i in range(max_topics):
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            display_name = f"{i+1}. {topics[i]}"
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
            if len(display_name) > 35:
                display_name = display_name[:32] + "..."
            
            # –ó–Ω–∞—á–µ–Ω–∏–µ callback_data –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–±–æ–ª—å—à–∏–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å
            keyboard.append([InlineKeyboardButton(display_name, callback_data=f"topic_{i+1}")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π
        keyboard.append([InlineKeyboardButton("üîÑ –ë–æ–ª—å—à–µ —Ç–µ–º", callback_data="more_topics")])
        keyboard.append([InlineKeyboardButton("‚úèÔ∏è –°–≤–æ—è —Ç–µ–º–∞", callback_data="custom_topic")])
        keyboard.append([InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")])
        
        return InlineKeyboardMarkup(keyboard)
        
    def main_menu(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (alias –¥–ª—è get_main_menu_keyboard)"""
        return self.get_main_menu_keyboard()