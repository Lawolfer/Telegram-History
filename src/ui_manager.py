
import re
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

class UIManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    
    def __init__(self, logger):
        self.logger = logger
    
    def main_menu(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("üìö –í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É", callback_data='topic')],
            [InlineKeyboardButton("üß† –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data='test')],
            [InlineKeyboardButton("üó£Ô∏è –ë–µ—Å–µ–¥–∞ –æ–± –∏—Å—Ç–æ—Ä–∏–∏", callback_data='conversation')],
            [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", callback_data='clear_client')],
            [InlineKeyboardButton("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ", callback_data='project_info')]
        ]
        return InlineKeyboardMarkup(keyboard)
        
    def parse_topics(self, topics_text):
        """–ü–∞—Ä—Å–∏—Ç —Ç–µ–º—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω–æ–≥–æ API"""
        topics = []
        
        # –ò—â–µ–º —Å–ø–∏—Å–∫–∏ —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
        matches = re.findall(r'^\s*\d+\.\s+(.+)$', topics_text, re.MULTILINE)
        
        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        if matches:
            topics = [match.strip() for match in matches if match.strip()]
        else:
            # –ü—Ä–æ–±—É–µ–º –∏—Å–∫–∞—Ç—å —Ç–µ–º—ã —Å —Ç–∏—Ä–µ –∏–ª–∏ –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏
            alt_matches = re.findall(r'^\s*[-*]\s+(.+)$', topics_text, re.MULTILINE)
            if alt_matches:
                topics = [match.strip() for match in alt_matches if match.strip()]
            else:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞, –Ω–∏ —Å–ø–∏—Å–∫–∞ —Å —Ç–∏—Ä–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º
                lines = topics_text.split('\n')
                topics = [line.strip() for line in lines if line.strip() and len(line.strip()) < 100]
        
        return topics
    
    def create_topics_keyboard(self, topics):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–º–∞–º–∏"""
        keyboard = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ 10 —Ç–µ–º (–ø–æ 2 –≤ —Ä—è–¥)
        topics_to_show = topics[:min(20, len(topics))]
        
        for i in range(0, len(topics_to_show), 2):
            row = []
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –∫–Ω–æ–ø–∫—É –≤ —Ä—è–¥—É
            topic_text = f"{i+1}. {topics_to_show[i]}"
            if len(topic_text) > 40:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
                topic_text = topic_text[:37] + "..."
            row.append(InlineKeyboardButton(topic_text, callback_data=f'topic_{i+1}'))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä—É—é –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if i + 1 < len(topics_to_show):
                topic_text = f"{i+2}. {topics_to_show[i+1]}"
                if len(topic_text) > 40:
                    topic_text = topic_text[:37] + "..."
                row.append(InlineKeyboardButton(topic_text, callback_data=f'topic_{i+2}'))
            
            keyboard.append(row)
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –≤–Ω–∏–∑—É
        keyboard.append([InlineKeyboardButton("üîÑ –ë–æ–ª—å—à–µ —Ç–µ–º", callback_data='more_topics')])
        keyboard.append([InlineKeyboardButton("‚úèÔ∏è –°–≤–æ—è —Ç–µ–º–∞", callback_data='custom_topic')])
        keyboard.append([InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')])
        
        return InlineKeyboardMarkup(keyboard)

class UIManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    
    def __init__(self, logger):
        self.logger = logger
    
    def main_menu(self):
        """
        –°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫.

        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é
        """
        keyboard = [
            [InlineKeyboardButton("üîç –í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É", callback_data='topic')],
            [InlineKeyboardButton("‚úÖ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data='test')],
            [InlineKeyboardButton("üí¨ –ë–µ—Å–µ–¥–∞ –æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏", callback_data='conversation')],
            [InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ", callback_data='project_info')],
            [InlineKeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data='cancel')]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def parse_topics(self, topics_text):
        """
        –ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç —Å —Ç–µ–º–∞–º–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ–º —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π.

        Args:
            topics_text (str): –¢–µ–∫—Å—Ç —Å —Ç–µ–º–∞–º–∏ –æ—Ç API

        Returns:
            list: –°–ø–∏—Å–æ–∫ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–º
        """
        filtered_topics = []

        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–º
        pattern = r'(?:^\d+[.):]\s*|^[*‚Ä¢-]\s*|^[–∞-—è–ê-–Ø\w]+[:.]\s*)(.+?)$'

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        unique_topics_set = set()

        for line in topics_text.split('\n'):
            line = line.strip()
            if not line or len(line) <= 1:
                continue

            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ç–µ–º—É —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
            match = re.search(pattern, line, re.MULTILINE)
            if match:
                topic_text = match.group(1).strip()
                if topic_text and topic_text not in unique_topics_set:
                    filtered_topics.append(topic_text)
                    unique_topics_set.add(topic_text)
            # –ï—Å–ª–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
            elif '.' in line or ':' in line:
                parts = line.split('.', 1) if '.' in line else line.split(':', 1)
                if len(parts) > 1:
                    topic_text = parts[1].strip()
                    if topic_text and topic_text not in unique_topics_set:
                        filtered_topics.append(topic_text)
                        unique_topics_set.add(topic_text)
            # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Å—Ç—Ä–æ–∫, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å —Ü–∏—Ñ—Ä—ã
            elif line[0].isdigit():
                i = 1
                while i < len(line) and (line[i].isdigit() or line[i] in ' \t.):'):
                    i += 1
                if i < len(line):
                    topic_text = line[i:].strip()
                    if topic_text and topic_text not in unique_topics_set:
                        filtered_topics.append(topic_text)
                        unique_topics_set.add(topic_text)
            else:
                if line not in unique_topics_set:
                    filtered_topics.append(line)
                    unique_topics_set.add(line)

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 30 —Ç–µ–º
        return filtered_topics[:30]
    
    def create_topics_keyboard(self, topics):
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã.

        Args:
            topics (list): –°–ø–∏—Å–æ–∫ —Ç–µ–º

        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        """
        keyboard = []

        for i, topic in enumerate(topics, 1):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–º–∞ –Ω–µ –ø—É—Å—Ç–∞—è
            if topic and len(topic.strip()) > 0:
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–º—ã –≤ –∫–Ω–æ–ø–∫–µ
                display_topic = topic[:30] + '...' if len(topic) > 30 else topic
                keyboard.append([InlineKeyboardButton(f"{i}. {display_topic}", callback_data=f'topic_{i}')])
            else:
                # –ï—Å–ª–∏ —Ç–µ–º–∞ –ø—É—Å—Ç–∞—è, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å
                keyboard.append([InlineKeyboardButton(f"{i}. [–¢–µ–º–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞]", callback_data=f'topic_{i}')])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–≤–æ–¥–∞ —Å–≤–æ–µ–π —Ç–µ–º—ã –∏ –ø–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ —Ç–µ–º
        keyboard.append([
            InlineKeyboardButton("üìù –°–≤–æ—è —Ç–µ–º–∞", callback_data='custom_topic'),
            InlineKeyboardButton("üîÑ –ë–æ–ª—å—à–µ —Ç–µ–º", callback_data='more_topics')
        ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
        keyboard.append([InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')])

        return InlineKeyboardMarkup(keyboard)
