
import threading
import time
from src.telegram_queue import TelegramRequestQueue

class MessageManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ Telegram API"""

    def __init__(self, logger):
        self.logger = logger
        self.active_messages = {}  # –ö—ç—à –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ user_id
        self.message_lock = threading.RLock()  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        self.request_queue = TelegramRequestQueue(max_requests_per_second=25, logger=logger)

    def save_message_id(self, update, context, message_id):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π.

        Args:
            update (telegram.Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context (telegram.ext.CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            message_id (int): ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        """
        # –ü–æ–ª—É—á–∞–µ–º user_id
        user_id = update.effective_user.id

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        with self.message_lock:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º message_ids, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            if not context.user_data.get('message_ids'):
                context.user_data['message_ids'] = []

            # –î–æ–±–∞–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫
            context.user_data['message_ids'].append(message_id)

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö ID –¥–æ 50 –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
            if len(context.user_data['message_ids']) > 50:
                context.user_data['message_ids'] = context.user_data['message_ids'][-50:]

    def save_active_message_id(self, update, context, message_id):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º.

        Args:
            update (telegram.Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context (telegram.ext.CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            message_id (int): ID –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        user_id = update.effective_user.id

        with self.message_lock:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context.user_data['active_message_id'] = message_id
            # –¢–∞–∫–∂–µ –∫—ç—à–∏—Ä—É–µ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            self.active_messages[user_id] = message_id

    def delete_message_safe(self, bot, chat_id, message_id):
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤.
        
        Args:
            bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ Telegram
            chat_id: ID —á–∞—Ç–∞
            message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        """
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            def delete_func():
                return bot.delete_message(chat_id=chat_id, message_id=message_id)
            
            self.request_queue.enqueue(delete_func)
        except Exception as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ - —á–∞—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ —É–¥–∞–ª–µ–Ω—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
            pass

    def send_messages_batch(self, context, chat_id, messages, parse_mode='Markdown', 
                         disable_web_page_preview=True, interval=0.5):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π API.
        
        Args:
            context (telegram.ext.CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            parse_mode: –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (Markdown, HTML –∏ —Ç.–¥.)
            disable_web_page_preview: –û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫
            interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        sent_message_ids = []
        
        for i, message in enumerate(messages):
            # –ö–æ–Ω—Ç—Ä–æ–ª—å —Ä–∞–∑–º–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(message) > 4000:
                # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤
                chunks = [message[i:i+4000] for i in range(0, len(message), 4000)]
                for chunk in chunks:
                    # –û—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–±–µ—Å–ø–µ—á–∏—Ç –ø–∞—É–∑—ã –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    def send_func():
                        return context.bot.send_message(
                            chat_id=chat_id,
                            text=chunk,
                            parse_mode=parse_mode,
                            disable_web_page_preview=disable_web_page_preview
                        )
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                    sent_message = self.request_queue.enqueue(send_func)
                    if sent_message:
                        sent_message_ids.append(sent_message.message_id)
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                def send_func():
                    return context.bot.send_message(
                        chat_id=chat_id,
                        text=message,
                        parse_mode=parse_mode,
                        disable_web_page_preview=disable_web_page_preview
                    )
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                sent_message = self.request_queue.enqueue(send_func)
                if sent_message:
                    sent_message_ids.append(sent_message.message_id)
        
        return sent_message_ids

    def clean_chat(self, bot, chat_id, user_id=None):
        """
        –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–µ—Ç–æ–¥–∞ delete_messages API Telegram.
        
        Args:
            bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ Telegram
            chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å)
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            user_str = f" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}" if user_id else ""
            self.logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ {chat_id}{user_str}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —É—Å–ø–µ—Ö–∞
            success = False
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ ID —Å–æ–æ–±—â–µ–Ω–∏–π
            message_ids = []
            if user_id:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ dispatcher
                    user_data = None
                    if hasattr(bot, '_dispatcher') and hasattr(bot._dispatcher, 'user_data'):
                        user_data = bot._dispatcher.user_data.get(user_id, {})
                    
                    # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–∑–≤–ª–µ–∫–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π
                    if user_data and 'message_ids' in user_data:
                        message_ids = user_data.get('message_ids', [])
                except Exception as e:
                    self.logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            notification = bot.send_message(
                chat_id=chat_id, 
                text=f"üßπ –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É —á–∞—Ç–∞... –ù–∞–π–¥–µ–Ω–æ {len(message_ids)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            if message_ids:
                self.logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å {len(message_ids)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ {chat_id}")
                
                # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 100 (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è delete_messages)
                message_chunks = [message_ids[i:i+100] for i in range(0, len(message_ids), 100)]
                total_deleted = 0
                
                for chunk in message_chunks:
                    try:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ delete_messages –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
                        def delete_messages_func(message_ids=chunk):
                            return bot._bot.delete_messages(chat_id=chat_id, message_ids=message_ids)
                        
                        result = self.request_queue.enqueue(delete_messages_func)
                        
                        if result:
                            total_deleted += len(chunk)
                            self.logger.info(f"–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ {len(chunk)} —Å–æ–æ–±—â–µ–Ω–∏–π –ø–∞–∫–µ—Ç–æ–º")
                        
                        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
                        import time
                        time.sleep(0.5)
                        
                    except Exception as e:
                        self.logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–∫–µ—Ç–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
                        
                        # –ï—Å–ª–∏ –ø–∞–∫–µ—Ç–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É–µ–º —É–¥–∞–ª—è—Ç—å –ø–æ –æ–¥–Ω–æ–º—É
                        individual_deleted = 0
                        for msg_id in chunk:
                            try:
                                def delete_msg_func(msg_id=msg_id):
                                    return bot.delete_message(chat_id=chat_id, message_id=msg_id)
                                
                                result = self.request_queue.enqueue(delete_msg_func)
                                if result:
                                    individual_deleted += 1
                                    total_deleted += 1
                            except Exception:
                                pass
                        
                        self.logger.info(f"–£–¥–∞–ª–µ–Ω–æ {individual_deleted} –∏–∑ {len(chunk)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ")
                
                # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                if user_id and hasattr(bot, '_dispatcher') and hasattr(bot._dispatcher, 'user_data'):
                    user_data = bot._dispatcher.user_data.get(user_id, {})
                    if user_data and 'message_ids' in user_data:
                        user_data['message_ids'] = []
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è
                if total_deleted > 0:
                    success = True
                    self.logger.info(f"–í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ {total_deleted} –∏–∑ {len(message_ids)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
                    summary_text = f"‚úÖ –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –£–¥–∞–ª–µ–Ω–æ {total_deleted} –∏–∑ {len(message_ids)} —Å–æ–æ–±—â–µ–Ω–∏–π."
                    if total_deleted < len(message_ids):
                        summary_text += f"\n\n–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ({len(message_ids) - total_deleted}) –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω—ã - –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω—ã –∏–ª–∏ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–µ."
                    
                    bot.send_message(chat_id=chat_id, text=summary_text)
            else:
                self.logger.info(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —á–∞—Ç–µ {chat_id}")
                
                # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
                try:
                    bot.send_message(
                        chat_id=chat_id, 
                        text="‚ÑπÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –í—ã–ø–æ–ª–Ω—è—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –æ—á–∏—Å—Ç–∫—É..."
                    )
                    
                    # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –æ—á–∏—Å—Ç–∫–∏
                    commands = ["/clearcache", "/cleanchat", "/clear"]
                    for cmd in commands:
                        try:
                            sent_msg = bot.send_message(chat_id=chat_id, text=cmd)
                            import time
                            time.sleep(1)
                            def delete_cmd_func(msg_id=sent_msg.message_id):
                                return bot.delete_message(chat_id=chat_id, message_id=msg_id)
                            self.request_queue.enqueue(delete_cmd_func)
                        except Exception:
                            pass
                    
                    # –°—á–∏—Ç–∞–µ–º –∫–∞–∫ —á–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö
                    success = True
                    bot.send_message(
                        chat_id=chat_id,
                        text="üßπ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–µ—Ä—Å–∏–∏ –≤–∞—à–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ Telegram."
                    )
                except Exception as e2:
                    self.logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞: {e2}")
            
            # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –æ—á–∏—Å—Ç–∫—É", callback_data="clear_chat_retry")],
                [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            bot.send_message(
                chat_id=chat_id,
                text=f"{'‚úÖ –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!' if success else '‚ö†Ô∏è –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å.'}\n\n"
                     f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.",
                reply_markup=reply_markup
            )
            
            return success
                
        except Exception as e:
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ {chat_id}: {e}")
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                from telegram import InlineKeyboardButton, InlineKeyboardMarkup
                keyboard = [[InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="clear_chat_retry")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                bot.send_message(
                    chat_id=chat_id,
                    text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —á–∞—Ç–∞: {str(e)[:50]}...\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑.",
                    reply_markup=reply_markup
                )
            except:
                pass
            return False
    
    # –ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
    delete_chat_history = clean_chat

    def __del__(self):
        """–ó–∞–≤–µ—Ä—à–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞"""
        if hasattr(self, 'request_queue'):
            self.request_queue.stop()
