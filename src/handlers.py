import telegram
import re
import random
import os
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ChatAction
from telegram.ext import ConversationHandler

class CommandHandlers:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""

    def __init__(self, ui_manager, api_client, message_manager, content_service, logger, config):
        self.ui_manager = ui_manager
        self.api_client = api_client
        self.message_manager = message_manager
        self.content_service = content_service
        self.logger = logger
        self.config = config

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
        from src.history_map import HistoryMap
        self.history_map = HistoryMap(logger)

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–∑ config
        from src.config import TOPIC, CHOOSE_TOPIC, TEST, ANSWER, CONVERSATION, MAP
        self.TOPIC = TOPIC
        self.CHOOSE_TOPIC = CHOOSE_TOPIC
        self.TEST = TEST
        self.ANSWER = ANSWER
        self.CONVERSATION = CONVERSATION
        self.MAP = MAP

    def start(self, update, context):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.

        Args:
            update (telegram.Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context (telegram.ext.CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞

        Returns:
            int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        """
        user = update.message.from_user
        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.first_name}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –¥–≤–∞–∂–¥—ã –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        self.message_manager.clear_chat_history(update, context)
        self.message_manager.clear_chat_history(update, context)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
        sent_message = update.message.reply_text(
            f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n\n"
            "ü§ñ –Ø –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –±–æ—Ç –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏. –° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n\n"
            "üìö *–ò–∑—É—á–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ç–µ–º—ã* ‚Äî –æ—Ç –¥—Ä–µ–≤–Ω–∏—Ö –≤—Ä–µ–º–µ–Ω –¥–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏\n"
            "‚úÖ *–ü—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç—ã* –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∑–Ω–∞–Ω–∏–π\n"
            "üîç *–í—ã–±–∏—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–º—ã* –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞\n"
            "üìù *–ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Å–≤–æ–∏ —Ç–µ–º—ã* –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ —Å–ø–∏—Å–∫–µ\n\n"
            "–ö–∞–∂–¥–∞—è —Ç–µ–º–∞ –ø–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ 5 –≥–ª–∞–≤–∞—Ö —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏—Å—Ç–æ–∫–∞—Ö, –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö, "
            "–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –ª–∏—á–Ω–æ—Å—Ç—è—Ö, –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏.\n\n"
            "‚ùó *–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω –≤ –∫–∞—á–µ—Å—Ç–≤–µ —É—á–µ–±–Ω–æ–≥–æ –ø–æ—Å–æ–±–∏—è.*",
            parse_mode='Markdown'
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
        self.message_manager.save_message_id(update, context, sent_message.message_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        sent_msg = update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:",
            reply_markup=self.ui_manager.main_menu()
        )
        self.message_manager.save_message_id(update, context, sent_msg.message_id)
        return self.TOPIC

    def button_handler(self, update, context):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π.

        Args:
            update (telegram.Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context (telegram.ext.CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞

        Returns:
            int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        """
        query = update.callback_query
        try:
            query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        except Exception as e:
            self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–Ω–æ–ø–∫—É: {e}")

        user_id = query.from_user.id

        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
        self.message_manager.clean_all_messages_except_active(update, context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç data –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        query_data = query.data

        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {query_data}")

        if query_data == 'back_to_menu':
            query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
                reply_markup=self.ui_manager.main_menu()
            )
            return self.TOPIC
        elif query_data == 'project_info':
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ –∏–∑ —Ñ–∞–π–ª–∞
            try:
                with open('static/presentation.txt', 'r', encoding='utf-8') as file:
                    presentation_text = file.read()
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ presentation.txt: {e}")
                presentation_text = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."

            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ (–º–∞–∫—Å–∏–º—É–º 3000 —Å–∏–º–≤–æ–ª–æ–≤)
            max_length = 3000
            parts = []

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤ –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å
            current_part = "üìã *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ*\n\n"

            # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            paragraphs = presentation_text.split('\n\n')

            for paragraph in paragraphs:
                # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –ø—Ä–µ–≤—ã—Å–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
                if len(current_part) + len(paragraph) + 2 > max_length:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å
                    parts.append(current_part)
                    current_part = paragraph
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
                    if current_part and current_part != "üìã *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ*\n\n":
                        current_part += '\n\n' + paragraph
                    else:
                        current_part += paragraph

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
            if current_part:
                parts.append(current_part)

            try:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏
                keyboard_first = [
                    [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –≤ Word", callback_data='download_detailed_presentation')],
                    [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]
                ]

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                query.edit_message_text(
                    parts[0][:4000],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                    parse_mode='Markdown',
                    reply_markup=InlineKeyboardMarkup(keyboard_first)
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –∫–∞–∫ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                for i, part in enumerate(parts[1:], 1):
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏
                    if i == len(parts[1:]):
                        keyboard_last = [
                            [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –≤ Word", callback_data='download_detailed_presentation')],
                            [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]
                        ]
                        sent_msg = query.message.reply_text(
                            part[:4000],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                            parse_mode='Markdown',
                            reply_markup=InlineKeyboardMarkup(keyboard_last)
                        )
                    else:
                        sent_msg = query.message.reply_text(
                            part[:4000],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                            parse_mode='Markdown'
                        )
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
                    self.message_manager.save_message_id(update, context, sent_msg.message_id)

                self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ")
            except telegram.error.BadRequest as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ: {e}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                for i, part in enumerate(parts):
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏
                    if i == len(parts) - 1:
                        keyboard = [
                            [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –≤ Word", callback_data='download_detailed_presentation')],
                            [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]
                        ]
                        sent_msg = query.message.reply_text(
                            part[:4000],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                            parse_mode='Markdown',
                            reply_markup=InlineKeyboardMarkup(keyboard)
                        )
                    else:
                        sent_msg = query.message.reply_text(
                            part[:4000],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                            parse_mode='Markdown'
                        )
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
                    self.message_manager.save_message_id(update, context, sent_msg.message_id)

            return self.TOPIC
        elif query_data == 'download_detailed_presentation':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
            try:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ñ–∞–π–ª–∞
                query.edit_message_text(
                    "‚è≥ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –ø–æ–¥—Ä–æ–±–Ω—É—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ Word...",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]])
                )

                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è DOCX –∏ —Å–æ–∑–¥–∞—ë–º –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é
                import sys
                sys.path.append('.')
                from create_presentation_doc import create_presentation_docx

                # –°–æ–∑–¥–∞–µ–º Word –¥–æ–∫—É–º–µ–Ω—Ç
                docx_path = create_presentation_docx('detailed_presentation.md', '–ò—Å—Ç–æ—Ä–∏—è_–†–æ—Å—Å–∏–∏_–ø–æ–¥—Ä–æ–±–Ω–∞—è_–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è.docx')

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ DOCX
                with open(docx_path, 'rb') as docx_file:
                    context.bot.send_document(
                        chat_id=update.effective_chat.id,
                        document=docx_file,
                        filename='–ò—Å—Ç–æ—Ä–∏—è_–†–æ—Å—Å–∏–∏_–ø–æ–¥—Ä–æ–±–Ω–∞—è_–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è.docx',
                        caption="üìö –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–ª–ª—é—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –±–æ—Ç–∞ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Word."
                    )

                # –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                with open('detailed_presentation.md', 'rb') as md_file:
                    context.bot.send_document(
                        chat_id=update.effective_chat.id,
                        document=md_file,
                        filename='–ò—Å—Ç–æ—Ä–∏—è_–†–æ—Å—Å–∏–∏_–ø–æ–¥—Ä–æ–±–Ω–∞—è_–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è.md',
                        caption="üìÑ –í–µ—Ä—Å–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ Markdown."
                    )

                self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–∫–∞—á–∞–ª –ø–æ–¥—Ä–æ–±–Ω—É—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ Word –∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
                query.edit_message_text(
                    "‚úÖ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –¥–≤—É—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö:\n\n"
                    "1. DOCX (Word) - —Å –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è–º–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º\n"
                    "2. Markdown - —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]])
                )
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: {e}")
                query.edit_message_text(
                    f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: {e}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]])
                )
            return self.TOPIC
        elif query_data == 'history_map':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç—ã
            user_id = query.from_user.id
            self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É")

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞ –∫–∞—Ä—Ç–µ
            categories = self.history_map.get_categories()
            keyboard = []

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–∞–∫—Å–∏–º—É–º 10 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
            category_buttons = []
            for i, category in enumerate(categories[:10]):
                category_buttons.append(InlineKeyboardButton(f"üìç {category}", callback_data=f'map_category_{category}'))
                # –°–æ–∑–¥–∞–µ–º —Ä—è–¥—ã –ø–æ 2 –∫–Ω–æ–ø–∫–∏
                if i % 2 == 1 or i == len(categories[:10])-1:
                    keyboard.append(category_buttons)
                    category_buttons = []

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–π
            keyboard.append([InlineKeyboardButton("üìã –ë–æ–ª—å—à–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π ‚ñ∂Ô∏è", callback_data='map_more_categories')])
            keyboard.append([InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–º–µ", callback_data='map_search_topic')])
            keyboard.append([InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è", callback_data='map_random')])
            keyboard.append([InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')])

            query.edit_message_text(
                "üó∫Ô∏è *–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π*\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ, "
                "–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–∏—Å–∫–æ–º –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º–µ –∏–ª–∏ "
                "–ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏.",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            return self.MAP

        elif query_data.startswith('map_category_'):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
            category = query_data[13:]  # map_category_{category}
            user_id = query.from_user.id
            self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–∞—Ä—Ç—ã: {category}")

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
            keyboard = [
                [InlineKeyboardButton("üó∫Ô∏è –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data=f'map_img_{category}')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data='history_map')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–∞ –∫–∞—Ä—Ç—ã
            query.edit_message_text(
                f"üìç *–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}*\n\n"
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π: *{category}*\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–∞—Ä—Ç—ã:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            return self.MAP

        elif query_data.startswith('map_url_'):
            category = query_data.replace('map_url_', '')

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤–º–µ—Å—Ç–æ URL
            status_message = context.bot.send_message(
                chat_id=user_id,
                text=f"üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category}¬ª...",
                parse_mode='HTML'
            )

            map_image_path = self.history_map.generate_map_image(category=category)

            if map_image_path and os.path.exists(map_image_path):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
                with open(map_image_path, 'rb') as img:
                    context.bot.send_photo(
                        chat_id=user_id,
                        photo=img,
                        caption=f"üó∫Ô∏è –ö–∞—Ä—Ç–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π: {category}",
                        parse_mode='HTML'
                    )
            else:
                context.bot.send_message(
                    chat_id=user_id,
                    text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode='HTML'
                )

            context.bot.delete_message(chat_id=user_id, message_id=status_message.message_id)
            return self.MAP

        elif query_data.startswith('map_img_'):
            category = query_data.replace('map_img_', '')

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
            status_message = context.bot.send_message(
                chat_id=user_id,
                text=f"üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category}¬ª...",
                parse_mode='HTML'
            )

            try:
                # –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
                map_path = self.history_map.generate_map_image(category=category)

                if map_path and os.path.exists(map_path):
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    try:
                        with open(map_path, 'rb') as img_file:
                            context.bot.send_photo(
                                chat_id=user_id,
                                photo=img_file,
                                caption=f"üó∫Ô∏è –ö–∞—Ä—Ç–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category}¬ª",
                                parse_mode='HTML'
                            )
                    except Exception as img_error:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã: {img_error}")
                        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        default_map_path = 'static/default_map.png'
                        if os.path.exists(default_map_path):
                            try:
                                with open(default_map_path, 'rb') as default_img:
                                    context.bot.send_photo(
                                        chat_id=user_id,
                                        photo=default_img,
                                        caption=f"üó∫Ô∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ (–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category}¬ª)",
                                        parse_mode='HTML'
                                    )
                            except Exception as e:
                                context.bot.send_message(
                                    chat_id=user_id,
                                    text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç—ã: {str(e)}",
                                    parse_mode='HTML'
                                )
                        else:
                            context.bot.send_message(
                                chat_id=user_id,
                                text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É.",
                                parse_mode='HTML'
                            )

                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    try:
                        context.bot.delete_message(
                            chat_id=user_id,
                            message_id=status_message.message_id
                        )
                    except Exception as delete_error:
                        self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {delete_error}")

                    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∫–∞—Ä—Ç—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                    try:
                        os.remove(map_path)
                        self.logger.info(f"–§–∞–π–ª –∫–∞—Ä—Ç—ã —É–¥–∞–ª–µ–Ω: {map_path}")
                    except Exception as e:
                        self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –∫–∞—Ä—Ç—ã {map_path}: {e}")

                    self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –∫–∞—Ä—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}")
                else:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é
                    default_map_path = 'static/default_map.png'
                    if os.path.exists(default_map_path):
                        try:
                            with open(default_map_path, 'rb') as default_img:
                                context.bot.send_photo(
                                    chat_id=user_id,
                                    photo=default_img,
                                    caption=f"üó∫Ô∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ (–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category}¬ª)",
                                    parse_mode='HTML'
                                )
                        except Exception as e:
                            context.bot.send_message(
                                chat_id=user_id,
                                text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É: {str(e)}",
                                parse_mode='HTML'
                            )
                    else:
                        context.bot.send_message(
                            chat_id=user_id,
                            text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category}¬ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                            parse_mode='HTML'
                        )

                    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    context.bot.delete_message(
                        chat_id=user_id, 
                        message_id=status_message.message_id
                    )
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã: {e}")
                context.bot.send_message(
                    chat_id=user_id,
                    text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã: {str(e)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode='HTML'
                )

                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                try:
                    context.bot.delete_message(
                        chat_id=user_id, 
                        message_id=status_message.message_id
                    )
                except:
                    pass

            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –∫–∞—Ä—Ç
            try:
                self.history_map.clean_old_maps()
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –∫–∞—Ä—Ç: {e}")

            return self.MAP

        elif query_data == 'map_more_categories':
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            categories = self.history_map.get_categories()
            keyboard = []

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if len(categories) > 10:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                remaining_categories = categories[10:]

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä—è–¥—ã –∫–Ω–æ–ø–æ–∫ (–ø–æ 2 –≤ —Ä—è–¥—É)
                for i in range(0, len(remaining_categories), 2):
                    row = []
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –∫–Ω–æ–ø–∫—É
                    category = remaining_categories[i]
                    row.append(InlineKeyboardButton(f"üìç {category}", callback_data=f'map_category_{category}'))

                    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä—É—é –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                    if i + 1 < len(remaining_categories):
                        category = remaining_categories[i + 1]
                        row.append(InlineKeyboardButton(f"üìç {category}", callback_data=f'map_category_{category}'))

                    keyboard.append(row)
            else:
                # –ï—Å–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                keyboard.append([InlineKeyboardButton("‚ö†Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç", callback_data='history_map')])

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data='history_map')])
            keyboard.append([InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–º–µ", callback_data='map_search_topic')])
            keyboard.append([InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')])

            try:
                query.edit_message_text(
                    "üó∫Ô∏è *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π*\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ.",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                query.message.reply_text(
                    "üó∫Ô∏è *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π*\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ.",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
            return self.MAP

        elif query_data == 'map_search_topic':
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–≤–µ—Å—Ç–∏ —Ç–µ–º—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã —Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
            query.edit_message_text(
                "üîç *–ü–æ–∏—Å–∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π –ø–æ —Ç–µ–º–µ*\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Ç–µ–º—É –∏–ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π.\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç:\n"
                "‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ª–∏—á–Ω–æ—Å—Ç–∏: ¬´–ü–µ—Ç—Ä I¬ª, ¬´–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ II¬ª, ¬´–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ù–µ–≤—Å–∫–∏–π¬ª\n"
                "‚Ä¢ –í–æ–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: ¬´–ö—Ä—ã–º—Å–∫–∞—è –≤–æ–π–Ω–∞¬ª, ¬´–û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≤–æ–π–Ω–∞ 1812¬ª, ¬´–ü–æ–ª—Ç–∞–≤—Å–∫–∞—è –±–∏—Ç–≤–∞¬ª\n"
                "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã: ¬´–æ—Å–≤–æ–µ–Ω–∏–µ –°–∏–±–∏—Ä–∏¬ª, ¬´–∏–Ω–¥—É—Å—Ç—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è¬ª, ¬´—Ä–µ—Ñ–æ—Ä–º—ã¬ª\n"
                "‚Ä¢ –ì–µ–æ–≥—Ä–∞—Ñ–∏—è: ¬´–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–≤¬ª, ¬´–ú–æ—Å–∫–≤–∞¬ª, ¬´–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥ –†–æ—Å—Å–∏–∏¬ª\n"
                "‚Ä¢ –ü–µ—Ä–∏–æ–¥—ã: ¬´18 –≤–µ–∫¬ª, ¬´—Å–æ–≤–µ—Ç—Å–∫–∏–π –ø–µ—Ä–∏–æ–¥¬ª, ¬´–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –†–æ–º–∞–Ω–æ–≤—ã—Ö¬ª\n\n"
                "–ë–æ—Ç –Ω–∞–π–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–æ–±—ã—Ç–∏—è –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç –∏—Ö –Ω–∞ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–µ —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data='history_map')]]),
                parse_mode='Markdown'
            )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ç–µ–º—ã
            context.user_data['waiting_for_map_topic'] = True
            return self.MAP

        elif query_data == 'map_random':
            # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
            random_events = self.history_map.get_random_events(8)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            status_message = context.bot.send_message(
                chat_id=user_id,
                text="üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏...",
                parse_mode='HTML'
            )

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
            map_image_path = self.history_map.generate_map_image(events=random_events)

            if map_image_path and os.path.exists(map_image_path):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
                with open(map_image_path, 'rb') as img:
                    context.bot.send_photo(
                        chat_id=user_id,
                        photo=img,
                        caption="üó∫Ô∏è –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π –†–æ—Å—Å–∏–∏\n"
                               "–ù–æ–º–µ—Ä–∞ –Ω–∞ –∫–∞—Ä—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ø–æ–¥–ø–∏—Å—è–º –≤–Ω–∏–∑—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
                        parse_mode='HTML'
                    )

                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                context.bot.delete_message(
                    chat_id=user_id,
                    message_id=status_message.message_id
                )

                # –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                try:
                    os.remove(map_image_path)
                except Exception as e:
                    self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –∫–∞—Ä—Ç—ã {map_image_path}: {e}")

                self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏")
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                context.bot.edit_message_text(
                    chat_id=user_id,
                    message_id=status_message.message_id,
                    text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    parse_mode='HTML'
                )
                self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

            return self.MAP

        elif query_data == 'map_image':
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
            status_message = context.bot.send_message(
                chat_id=user_id,
                text="üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã...",
                parse_mode='HTML'
            )

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
            map_image_path = self.history_map.generate_map_image()

            if map_image_path and os.path.exists(map_image_path):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
                with open(map_image_path, 'rb') as img:
                    context.bot.send_photo(
                        chat_id=user_id,
                        photo=img,
                        caption="üó∫Ô∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π –†–æ—Å—Å–∏–∏",
                        parse_mode='HTML'
                    )

                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                context.bot.delete_message(
                    chat_id=user_id,
                    message_id=status_message.message_id
                )

                # –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                os.remove(map_image_path)

                self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏")
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                context.bot.edit_message_text(
                    chat_id=user_id,
                    message_id=status_message.message_id,
                    text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∫–∞—Ä—Ç—É.",
                    parse_mode='HTML'
                )
                self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return self.MAP

        elif query_data == 'conversation':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –±–µ—Å–µ–¥—ã –æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏
            query.edit_message_text(
                "üó£Ô∏è *–ë–µ—Å–µ–¥–∞ –æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏*\n\n"
                "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞—á–∞—Ç—å –±–µ—Å–µ–¥—É –Ω–∞ –ª—é–±—É—é —Ç–µ–º—É, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –∏—Å—Ç–æ—Ä–∏–µ–π –†–æ—Å—Å–∏–∏.\n\n"
                "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –º—ã—Å–ª—å –∏–ª–∏ –≤–æ–ø—Ä–æ—Å, –∏ —è –æ—Ç–≤–µ—á—É –≤–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.",
                parse_mode='Markdown'
            )
            return self.CONVERSATION
        elif query_data == 'topic':
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º —Å –ø–æ–º–æ—â—å—é –ò–ò
            prompt = "–°–æ—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ –∏–∑ 30 –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–º –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è. –ö–∞–∂–¥–∞—è —Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –µ–º–∫–æ–π –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π (–Ω–µ –±–æ–ª–µ–µ 6-7 —Å–ª–æ–≤). –ü–µ—Ä–µ—á–∏—Å–ª–∏ –∏—Ö –≤ –≤–∏–¥–µ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞."
            try:
                try:
                    query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ —Ç–µ–º –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏...")
                except Exception as e:
                    self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–º: {e}")
                    query.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ —Ç–µ–º –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏...")

                topics_text = self.api_client.ask_grok(prompt)

                # –ü–∞—Ä—Å–∏–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—ã
                filtered_topics = self.ui_manager.parse_topics(topics_text)
                context.user_data['topics'] = filtered_topics

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–º–∞–º–∏
                reply_markup = self.ui_manager.create_topics_keyboard(filtered_topics)

                try:
                    query.edit_message_text(
                        "üìö *–¢–µ–º—ã –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:",
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–µ–º: {e}")
                    query.message.reply_text(
                        "üìö *–¢–µ–º—ã –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:",
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )

                self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –ø–æ–∫–∞–∑–∞–Ω—ã —Ç–µ–º—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è")
            except Exception as e:
                self.logger.log_error(e, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                query.edit_message_text(
                    f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–µ–º: {e}. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", 
                    reply_markup=self.ui_manager.main_menu()
                )
            return self.CHOOSE_TOPIC
        elif query_data == 'test':
            topic = context.user_data.get('current_topic', None)
            if not topic:
                query.edit_message_text(
                    "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–µ–º—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É'.",
                    reply_markup=self.ui_manager.main_menu()
                )
                return self.TOPIC

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç –∏–∑ –≤–æ–ø—Ä–æ—Å–æ–≤
            query.edit_message_text(f"üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ—Å—Ç –ø–æ —Ç–µ–º–µ: *{topic}*...", parse_mode='Markdown')
            self.logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞ –ø–æ —Ç–µ–º–µ '{topic}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                test_data = self.content_service.generate_test(topic)
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
                valid_questions = []
                display_questions = []

                # –ü—Ä–µ–∂–¥–µ –≤—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–∏–º, –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –º—ã –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                if isinstance(test_data, str):
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—É—Å—Ç—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏ –∏–ª–∏ –Ω–æ–º–µ—Ä–∞–º–∏
                    raw_questions = re.split(r'\n\s*\n|\n\d+[\.\)]\s+', test_data)
                    processed_questions = []
                    
                    for q in raw_questions:
                        q = q.strip()
                        if q and len(q) > 10 and ('?' in q or '–í–æ–ø—Ä–æ—Å' in q):
                            # –£–¥–∞–ª—è–µ–º –ª—é–±—ã–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –≤ –Ω–∞—á–∞–ª–µ –≤–æ–ø—Ä–æ—Å–∞
                            q = re.sub(r'^(\d+[\.\)]|\d+\.)\s*', '', q).strip()
                            processed_questions.append(q)
                            
                    if processed_questions:
                        valid_questions = processed_questions
                        display_questions = processed_questions
                    else:
                        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
                elif isinstance(test_data, dict):
                    # –°–ª—É—á–∞–π 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
                    if 'original_questions' in test_data and 'display_questions' in test_data:
                        if (isinstance(test_data['original_questions'], list) and 
                            isinstance(test_data['display_questions'], list) and
                            len(test_data['original_questions']) > 0):
                            valid_questions = test_data['original_questions']
                            display_questions = test_data['display_questions']
                        else:
                            raise ValueError("–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–æ–ø—Ä–æ—Å–æ–≤")
                            
                    # –°–ª—É—á–∞–π 2: –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ API
                    elif 'status' in test_data and test_data['status'] == 'error':
                        error_msg = test_data.get('content', '–û—à–∏–±–∫–∞ API')
                        self.logger.warning(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞: {error_msg}")
                        raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç: {error_msg}")
                        
                    # –°–ª—É—á–∞–π 3: –í–æ–ø—Ä–æ—Å—ã –≤ –ø–æ–ª–µ content
                    elif 'content' in test_data:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø content - —Å–ø–∏—Å–æ–∫
                        if isinstance(test_data['content'], list) and len(test_data['content']) > 0:
                            valid_questions = test_data['content']
                            display_questions = test_data['content']
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø content - —Å—Ç—Ä–æ–∫–∞ (—Ç—Ä–µ–±—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞)
                        elif isinstance(test_data['content'], str) and len(test_data['content']) > 0:
                            # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É—è –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –Ω–æ–º–µ—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
                            raw_questions = re.split(r'\n\s*\n|\n\d+[\.\)]\s+', test_data['content'])
                            processed_questions = []
                            
                            for q in raw_questions:
                                q = q.strip()
                                if q and len(q) > 10 and ('?' in q or '–í–æ–ø—Ä–æ—Å' in q):
                                    # –£–¥–∞–ª—è–µ–º –ª—é–±—ã–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ü–∏—Ñ—Ä—ã
                                    q = re.sub(r'^(\d+[\.\)]|\d+\.)\s*', '', q).strip()
                                    processed_questions.append(q)
                                    
                            if processed_questions:
                                valid_questions = processed_questions
                                display_questions = processed_questions
                            else:
                                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ –ø–æ–ª–µ content")
                        else:
                            raise ValueError("–ü–æ–ª–µ content —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∏")
                        
                    # –°–ª—É—á–∞–π 4: –ü–æ–∏—Å–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ –ª—é–±–æ–º —Å–ø–∏—Å–∫–æ–≤–æ–º –ø–æ–ª–µ
                    else:
                        found_questions = False
                        for field in test_data:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –ø–æ–ª–µ —Å–ø–∏—Å–æ–∫
                            if isinstance(test_data[field], list) and len(test_data[field]) > 0:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ - —Å—Ç—Ä–æ–∫–∏
                                if all(isinstance(q, str) for q in test_data[field]):
                                    valid_questions = test_data[field]
                                    display_questions = test_data[field]
                                    found_questions = True
                                    break
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –ø–æ–ª–µ —Å—Ç—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
                            elif isinstance(test_data[field], str) and len(test_data[field]) > 100:
                                # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
                                raw_questions = re.split(r'\n\s*\n|\n\d+[\.\)]\s+', test_data[field])
                                processed_questions = []
                                
                                for q in raw_questions:
                                    q = q.strip()
                                    if q and len(q) > 10 and ('?' in q or '–í–æ–ø—Ä–æ—Å' in q):
                                        q = re.sub(r'^(\d+[\.\)]|\d+\.)\s*', '', q).strip()
                                        processed_questions.append(q)
                                        
                                if processed_questions:
                                    valid_questions = processed_questions
                                    display_questions = processed_questions
                                    found_questions = True
                                    break
                        
                        if not found_questions:
                            self.logger.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞: {test_data}")
                            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
                
                # –°–ª—É—á–∞–π 5: test_data - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
                elif isinstance(test_data, list) and len(test_data) > 0:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ - —Å—Ç—Ä–æ–∫–∏
                    if all(isinstance(q, str) for q in test_data):
                        valid_questions = test_data
                        display_questions = test_data
                    else:
                        # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
                        string_questions = [str(q) for q in test_data if q]
                        if string_questions:
                            valid_questions = string_questions
                            display_questions = string_questions
                        else:
                            raise ValueError("–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ç–∏–ø–∞")
                        
                # –°–ª—É—á–∞–π 6: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
                else:
                    self.logger.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç test_data: {type(test_data).__name__}")
                    raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞: –ø–æ–ª—É—á–µ–Ω {type(test_data).__name__}")

                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–¥–∏–º –≤–æ–ø—Ä–æ—Å—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å
                if not valid_questions:
                    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –Ω–∞–±–æ—Ä –≤–æ–ø—Ä–æ—Å–æ–≤ —É API –Ω–∞–ø—Ä—è–º—É—é
                    prompt = f"–°–æ–∑–¥–∞–π 5 –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ —Ç–µ–º–µ '{topic}'. –ö–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ (1-4) –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: X'. –ü—Ä–æ–Ω—É–º–µ—Ä—É–π –≤–æ–ø—Ä–æ—Å—ã."
                    response = self.api_client.ask_grok(prompt, use_cache=False)
                    
                    # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É—è –ª–∏–±–æ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏, –ª–∏–±–æ –Ω–æ–º–µ—Ä–∞
                    raw_questions = re.split(r'\n\s*\n|\n\d+[\.\)]\s+', response)
                    processed_questions = []
                    
                    for q in raw_questions:
                        q = q.strip()
                        if q and len(q) > 10 and ('?' in q or '–í–æ–ø—Ä–æ—Å' in q):
                            # –£–¥–∞–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ü–∏—Ñ—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                            q = re.sub(r'^(\d+[\.\)]|\d+\.)\s*', '', q).strip()
                            processed_questions.append(q)
                            
                    if processed_questions:
                        valid_questions = processed_questions
                        display_questions = processed_questions
                    else:
                        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–∞–∂–µ —Å –ø—Ä—è–º—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –∫ API")

                # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
                valid_test = False
                for question in valid_questions:
                    if re.search(r"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\s*[1-4]", question):
                        valid_test = True
                        break
                
                if not valid_test:
                    # –ï—Å–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ—Ç, –¥–æ–±–∞–≤–∏–º –∏—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                    self.logger.warning("–í –≤–æ–ø—Ä–æ—Å–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö")
                    
                    new_questions = []
                    for i, q in enumerate(valid_questions):
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∫ –∫–∞–∂–¥–æ–º—É –≤–æ–ø—Ä–æ—Å—É, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                        if not re.search(r"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:", q):
                            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 4
                            import random
                            correct_answer = random.randint(1, 4)
                            q += f"\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}"
                        new_questions.append(q)
                    
                    valid_questions = new_questions
                    display_questions = new_questions

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                context.user_data['questions'] = valid_questions
                context.user_data['current_question'] = 0
                context.user_data['score'] = 0
                context.user_data['total_questions'] = len(valid_questions)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
                context.user_data['original_questions'] = valid_questions
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                context.user_data['display_questions'] = display_questions

                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
                keyboard = [[InlineKeyboardButton("‚ùå –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ç–µ—Å—Ç", callback_data='end_test')]]
                reply_markup = InlineKeyboardMarkup(keyboard)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—á–∞–ª–æ–º —Ç–µ—Å—Ç–∞
                query.edit_message_text(
                    f"üìù *–¢–µ—Å—Ç –ø–æ —Ç–µ–º–µ: {topic}*\n\n–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –∏–∑ {len(valid_questions)} –≤–æ–ø—Ä–æ—Å–æ–≤! –í–æ—Ç –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å:",
                    parse_mode='Markdown'
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                if len(display_questions) > 0:
                    query.message.reply_text(display_questions[0])
                    query.message.reply_text(
                        "–ù–∞–ø–∏—à–∏ —Ü–∏—Ñ—Ä—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (1, 2, 3 –∏–ª–∏ 4).", 
                        reply_markup=reply_markup
                    )
                    self.logger.info(f"–¢–µ—Å—Ç –ø–æ —Ç–µ–º–µ '{topic}' —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                else:
                    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∞")
                    
            except Exception as e:
                self.logger.log_error(e, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                query.edit_message_text(
                    f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞: {e}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", 
                    reply_markup=self.ui_manager.main_menu()
                )
            return self.ANSWER
        elif query_data == 'more_topics':
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ–º —Å –ø–æ–º–æ—â—å—é –ò–ò
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º
            random_seed = random.randint(1, 1000)
            prompt = f"–°–æ—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ –∏–∑ 30 –Ω–æ–≤—ã—Ö –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ–º –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è. –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ —Ç–µ–º–∞—Ö {random_seed}. –í—ã–±–µ—Ä–∏ —Ç–µ–º—ã, –æ—Ç–ª–∏—á–Ω—ã–µ –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∏ —Ä–∞–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö. –ö–∞–∂–¥–∞—è —Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –µ–º–∫–æ–π –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π (–Ω–µ –±–æ–ª–µ–µ 6-7 —Å–ª–æ–≤). –ü–µ—Ä–µ—á–∏—Å–ª–∏ –∏—Ö –≤ –≤–∏–¥–µ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞."
            try:
                query.edit_message_text("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–º –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏...")
                # –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤—ã—Ö —Ç–µ–º –∫–∞–∂–¥—ã–π —Ä–∞–∑
                topics = self.api_client.ask_grok(prompt, use_cache=False)

                # –ü–∞—Ä—Å–∏–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—ã
                filtered_topics = self.ui_manager.parse_topics(topics)
                context.user_data['topics'] = filtered_topics

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–º–∞–º–∏
                reply_markup = self.ui_manager.create_topics_keyboard(filtered_topics)

                query.edit_message_text(
                    "üìö *–ù–æ–≤—ã–µ —Ç–µ–º—ã –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–º –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –ø–æ–∫–∞–∑–∞–Ω –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ–º –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è")
            except Exception as e:
                self.logger.log_error(e, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö —Ç–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                query.edit_message_text(
                    f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–µ–º: {e}. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", 
                    reply_markup=self.ui_manager.main_menu()
                )
            return self.CHOOSE_TOPIC
        elif query_data == 'end_test' or query_data == 'cancel':
            if query_data == 'end_test':
                self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ—Å—Ä–æ—á–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ç–µ—Å—Ç")
                query.edit_message_text("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –¥–æ—Å—Ä–æ—á–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
                query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=self.ui_manager.main_menu())
                return self.TOPIC
            else:
                self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ")
                query.edit_message_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
                return ConversationHandler.END
        elif query_data == 'custom_topic':
            query.edit_message_text("–ù–∞–ø–∏—à–∏ —Ç–µ–º—É –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –∏–∑—É—á–∏—Ç—å:")
            return self.CHOOSE_TOPIC

    def choose_topic(self, update, context):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–æ–¥ —Å–≤–æ–µ–π —Ç–µ–º—ã.

        Args:
            update (telegram.Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context (telegram.ext.CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞

        Returns:
            int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        """
        user_id = None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—à–µ–ª –ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –æ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if update.callback_query:
            query = update.callback_query
            query.answer()
            user_id = query.from_user.id

            # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –¥–µ–π—Å—Ç–≤–∏–µ–º (–¥–≤–æ–π–Ω–æ–π –≤—ã–∑–æ–≤)
            self.message_manager.clear_chat_history(update, context)
            self.message_manager.clear_chat_history(update, context)

            self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–µ–º—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É: {query.data}")

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–ë–æ–ª—å—à–µ —Ç–µ–º"
            if query.data == 'more_topics':
                return self.button_handler(update, context)

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–°–≤–æ—è —Ç–µ–º–∞"
            elif query.data == 'custom_topic':
                query.edit_message_text("–ù–∞–ø–∏—à–∏ —Ç–µ–º—É –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –∏–∑—É—á–∏—Ç—å:")
                return self.CHOOSE_TOPIC

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
            elif query.data == 'back_to_menu':
                return self.button_handler(update, context)

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–µ–º—É –∏–∑ —Å–ø–∏—Å–∫–∞
            elif query.data.startswith('topic_'):
                try:
                    topic_index = int(query.data.split('_')[1]) - 1

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –≤ —Å–ø–∏—Å–∫–µ
                    if 0 <= topic_index < len(context.user_data['topics']):
                        topic = context.user_data['topics'][topic_index]
                        # –£–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä –∏–∑ —Ç–µ–º—ã, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                        if '. ' in topic:
                            topic = topic.split('. ', 1)[1]

                        context.user_data['current_topic'] = topic
                        query.edit_message_text(f"üìù –ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ: *{topic}*...", parse_mode='Markdown')
                        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Ç–µ–º—É: {topic}")

                        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ
                        def update_message(text):
                            query.edit_message_text(text, parse_mode='Markdown')

                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–µ
                        result = self.content_service.get_topic_info(topic, update_message)

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                        if isinstance(result, dict):
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª–æ–≤–∞—Ä—å (dict)
                            if result.get("status") == "success":
                                content = result.get("content", "")

                                # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                                if len(content) > 4000:
                                    messages = [content[i:i+4000] for i in range(0, len(content), 4000)]
                                else:
                                    messages = [content]

                                try:
                                    # –ü—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                    query.edit_message_text(
                                        f"üìö *{topic}*\n\n{messages[0]}", 
                                        parse_mode='Markdown'
                                    )
                                except Exception as e:
                                    # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                    self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                                    query.message.reply_text(
                                        f"üìö *{topic}*\n\n{messages[0]}", 
                                        parse_mode='Markdown'
                                    )

                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –∫–∞–∫ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                                for msg in messages[1:]:
                                    query.message.reply_text(msg, parse_mode='Markdown')
                            else:
                                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
                                error_message = result.get("content", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ: {topic}")
                                query.edit_message_text(
                                    f"‚ö†Ô∏è {error_message}",
                                    parse_mode='Markdown'
                                )
                        elif isinstance(result, list) and len(result) > 0:
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ (list)
                            try:
                                # –ü—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                query.edit_message_text(result[0], parse_mode='Markdown')
                            except Exception as e:
                                # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                                query.message.reply_text(result[0], parse_mode='Markdown')

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –Ω–æ–≤—ã–µ
                            for msg in result[1:]:
                                query.message.reply_text(msg, parse_mode='Markdown')
                        elif isinstance(result, list) and len(result) == 0:
                            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                            self.logger.warning(f"–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–µ–º—ã: {topic}")
                            query.edit_message_text(
                                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ *{topic}*. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ç–µ–º—É.",
                                parse_mode='Markdown'
                            )
                        else:
                            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ result –∏–º–µ–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ None
                            self.logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–º—ã: {topic}. –¢–∏–ø: {type(result)}")
                            query.edit_message_text(
                                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–º—ã *{topic}*. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ç–µ–º—É.",
                                parse_mode='Markdown'
                            )

                        query.message.reply_text("–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=self.ui_manager.main_menu())
                        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–µ–º–µ: {topic}")
                    else:
                        self.logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–µ–º—É —Å –∏–Ω–¥–µ–∫—Å–æ–º {topic_index+1}")
                        query.edit_message_text(
                            f"–û—à–∏–±–∫–∞: –¢–µ–º–∞ —Å –∏–Ω–¥–µ–∫—Å–æ–º {topic_index+1} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ç–µ–º—É.", 
                            reply_markup=self.ui_manager.main_menu()
                        )
                except Exception as e:
                    self.logger.log_error(e, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    query.edit_message_text(
                        f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ–º—ã: {e}. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", 
                        reply_markup=self.ui_manager.main_menu()
                    )
                return self.TOPIC
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º CHOOSE_TOPIC, –µ—Å–ª–∏ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥—Ä—É–≥–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏
        return self.CHOOSE_TOPIC

    def handle_custom_topic(self, update, context):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–≤–æ–µ–π —Ç–µ–º—ã.

        Args:
            update (telegram.Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context (telegram.ext.CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞

        Returns:
            int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        """
        topic = update.message.text
        user_id = update.message.from_user.id
        context.user_data['current_topic'] = topic

        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –Ω–æ–≤–æ–π —Ç–µ–º—ã (–¥–≤–æ–π–Ω–æ–π –≤—ã–∑–æ–≤)
        self.message_manager.clear_chat_history(update, context)
        self.message_manager.clear_chat_history(update, context)

        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª —Å–≤–æ—é —Ç–µ–º—É: {topic}")

        try:
            update.message.reply_text(f"üìù –ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ: *{topic}*...", parse_mode='Markdown')

            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ
            def update_message(text):
                update.message.reply_text(text, parse_mode='Markdown')

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–µ
            result = self.content_service.get_topic_info(topic, update_message)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if isinstance(result, dict):
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª–æ–≤–∞—Ä—å (dict)
                if result.get("status") == "success":
                    content = result.get("content", "")

                    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if len(content) > 4000:
                        messages = [content[i:i+4000] for i in range(0, len(content), 4000)]
                    else:
                        messages = [content]

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç—å—é
                    update.message.reply_text(
                        f"üìö *{topic}*\n\n{messages[0]}", 
                        parse_mode='Markdown'
                    )

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –∫–∞–∫ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                    for msg in messages[1:]:
                        update.message.reply_text(msg, parse_mode='Markdown')
                else:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
                    error_message = result.get("content", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ: {topic}")
                    update.message.reply_text(
                        f"‚ö†Ô∏è {error_message}",
                        parse_mode='Markdown'
                    )
            elif isinstance(result, list) and len(result) > 0:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ (list)
                for msg in result:
                    update.message.reply_text(msg, parse_mode='Markdown')
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω
                self.logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–º—ã: {topic}. –¢–∏–ø: {type(result)}")
                update.message.reply_text(
                    f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ *{topic}*. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ç–µ–º—É.",
                    parse_mode='Markdown'
                )

            update.message.reply_text("–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=self.ui_manager.main_menu())
            self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–µ–º–µ: {topic}")
        except Exception as e:
            self.logger.log_error(e, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ç–µ–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", reply_markup=self.ui_manager.main_menu())
        return self.TOPIC

    def handle_answer(self, update, context):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞.

        Args:
            update (telegram.Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context (telegram.ext.CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞

        Returns:
            int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        """
        user_answer = update.message.text.strip()
        user_id = update.message.from_user.id

        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
        self.message_manager.clear_chat_history(update, context)

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
        questions = context.user_data.get('questions', [])
        current_question = context.user_data.get('current_question', 0)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
        if not questions or current_question >= len(questions):
            self.logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å, –Ω–æ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –∏–Ω–¥–µ–∫—Å –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
            update.message.reply_text(
                "–û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ.",
                reply_markup=self.ui_manager.main_menu()
            )
            return self.TOPIC

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏ –∏ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        original_questions = context.user_data.get('original_questions', questions)
        display_questions = context.user_data.get('display_questions', questions)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
        if not user_answer.isdigit() or int(user_answer) < 1 or int(user_answer) > 4:
            sent_msg = update.message.reply_text(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ (–æ—Ç 1 –¥–æ 4).\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            self.message_manager.save_message_id(update, context, sent_msg.message_id)
            return self.ANSWER

        # –ü–∞—Ä—Å–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        try:
            correct_answer = None
            # –ü–æ–∏—Å–∫ —Å –±–æ–ª–µ–µ –≥–∏–±–∫–∏–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º
            patterns = [
                r"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\s*(\d+)",
                r"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π:\s*(\d+)",
                r"–û—Ç–≤–µ—Ç:\s*(\d+)",
                r"–í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç:\s*(\d+)"
            ]
            
            for pattern in patterns:
                correct_answer_match = re.search(pattern, original_questions[current_question])
                if correct_answer_match:
                    correct_answer = correct_answer_match.group(1)
                    break
                    
            if not correct_answer:
                # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –∫–æ–Ω—Ü–µ —Ç–µ–∫—Å—Ç–∞
                lines = original_questions[current_question].split('\n')
                for line in reversed(lines):
                    if re.search(r"\d+", line):
                        match = re.search(r"\d+", line)
                        if match:
                            correct_answer = match.group(0)
                            break
            
            if not correct_answer:
                raise ValueError("–§–æ—Ä–º–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            if int(correct_answer) < 1 or int(correct_answer) > 4:
                self.logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç {correct_answer} –≤ –≤–æ–ø—Ä–æ—Å–µ {current_question+1}")
                correct_answer = "1"  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
        except (IndexError, ValueError) as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –≤–æ–ø—Ä–æ—Å {current_question+1}: {e}")
            update.message.reply_text(
                "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç.", 
                reply_markup=self.ui_manager.main_menu()
            )
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –±–µ–∑ —É—á–µ—Ç–∞ —ç—Ç–æ–≥–æ
            context.user_data['current_question'] = current_question + 1
            
            # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π
            if context.user_data['current_question'] < len(display_questions):
                return self._show_next_question(update, context, display_questions)
            else:
                return self._show_test_results(update, context, questions)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        is_correct = user_answer == correct_answer
        if is_correct:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            context.user_data['score'] = context.user_data.get('score', 0) + 1
            sent_msg = update.message.reply_text("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
            self.message_manager.save_message_id(update, context, sent_msg.message_id)
            self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–≤–µ—Ç–∏–ª –≤–µ—Ä–Ω–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å {current_question+1}")
        else:
            sent_msg = update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
            self.message_manager.save_message_id(update, context, sent_msg.message_id)
            self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ–≤–µ—Ä–Ω–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å {current_question+1}")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        context.user_data['current_question'] = current_question + 1

        # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π
        if context.user_data['current_question'] < len(display_questions):
            return self._show_next_question(update, context, display_questions)
        else:
            return self._show_test_results(update, context, questions)

    def _show_next_question(self, update, context, display_questions):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å —Ç–µ—Å—Ç–∞.

        Args:
            update (telegram.Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context (telegram.ext.CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            display_questions (list): –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

        Returns:
            int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        """
        try:
            current_question = context.user_data.get('current_question', 0)
            total_questions = len(display_questions)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞
            sent_msg1 = update.message.reply_text(f"–í–æ–ø—Ä–æ—Å {current_question+1} –∏–∑ {total_questions}:")
            self.message_manager.save_message_id(update, context, sent_msg1.message_id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
            sent_msg2 = update.message.reply_text(display_questions[current_question])
            self.message_manager.save_message_id(update, context, sent_msg2.message_id)

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
            keyboard = [[InlineKeyboardButton("‚ùå –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ç–µ—Å—Ç", callback_data='end_test')]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            sent_msg3 = update.message.reply_text(
                "–ù–∞–ø–∏—à–∏ —Ü–∏—Ñ—Ä—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (1, 2, 3 –∏–ª–∏ 4).", 
                reply_markup=reply_markup
            )
            self.message_manager.save_message_id(update, context, sent_msg3.message_id)
            
            return self.ANSWER
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç.", 
                reply_markup=self.ui_manager.main_menu()
            )
            return self._show_test_results(update, context, display_questions)

    def _show_test_results(self, update, context, questions):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞.

        Args:
            update (telegram.Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context (telegram.ext.CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            questions (list): –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤

        Returns:
            int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        """
        try:
            user_id = update.message.from_user.id
            score = context.user_data.get('score', 0)
            total_questions = len(questions)
            
            # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
            if total_questions > 0:
                percentage = (score / total_questions) * 100
            else:
                percentage = 0
                
            topic = context.user_data.get('current_topic', '–≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ')

            # –û—Ü–µ–Ω–∫–∞ —É—Å–≤–æ–µ–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
            if percentage >= 90:
                assessment = "üèÜ –û—Ç–ª–∏—á–Ω–æ! –¢—ã –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ —É—Å–≤–æ–∏–ª –º–∞—Ç–µ—Ä–∏–∞–ª."
            elif percentage >= 70:
                assessment = "üëç –•–æ—Ä–æ—à–æ! –¢—ã –Ω–µ–ø–ª–æ—Ö–æ —É—Å–≤–æ–∏–ª –º–∞—Ç–µ—Ä–∏–∞–ª, –Ω–æ –µ—Å—Ç—å –Ω–∞–¥ —á–µ–º –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å."
            elif percentage >= 50:
                assessment = "üëå –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª."
            else:
                assessment = "üìö –ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ. –¢–µ–±–µ —Å—Ç–æ–∏—Ç –∏–∑—É—á–∏—Ç—å —Ç–µ–º—É –∑–∞–Ω–æ–≤–æ."

            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ—Ö–æ–∂–∏—Ö —Ç–µ–º
            similar_topics = self.recommend_similar_topics(topic, context)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            result_message = f"üéØ –¢–µ—Å—Ç –ø–æ —Ç–µ–º–µ '*{topic}*' –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
            result_message += f"–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {score} –∏–∑ {total_questions} –≤–æ–ø—Ä–æ—Å–æ–≤ ({percentage:.1f}%).\n\n{assessment}\n\n"

            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if similar_topics:
                result_message += "üìö *–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ç–µ–º—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:*\n"
                for i, rec_topic in enumerate(similar_topics, 1):
                    result_message += f"{i}. {rec_topic}\n"
                result_message += "\n"

            result_message += "–í—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
            update.message.reply_text(
                result_message,
                parse_mode='Markdown',
                reply_markup=self.ui_manager.main_menu()
            )
            
            self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≤–µ—Ä—à–∏–ª —Ç–µ—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º {score}/{total_questions} ({percentage:.1f}%)")
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
            context.user_data.pop('questions', None)
            context.user_data.pop('current_question', None)
            context.user_data.pop('score', None)
            context.user_data.pop('original_questions', None)
            context.user_data.pop('display_questions', None)
            
            return self.TOPIC
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞: {e}")
            update.message.reply_text(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞: {e}",
                reply_markup=self.ui_manager.main_menu()
            )
            return self.TOPIC

    def _sanitize_markdown(self, text):
        """
        Sanitizes text to prevent Markdown parsing errors.

        Args:
            text (str): The text to sanitize

        Returns:
            str: Sanitized text
        """
        if not text:
            return ""

        # Replace problematic characters that could break Markdown parsing
        replacements = {
            '*': '\\*',
            '_': '\\_',
            '`': '\\`',
            '[': '\\[',
            ']': '\\]',
            '(': '\\(',
            ')': '\\)',
            '#': '\\#',
            '>': '\\>',
            '+': '\\+',
            '-': '\\-',
            '=': '\\=',
            '|': '\\|',
            '{': '\\{',
            '}': '\\}',
            '.': '\\.',
            '!': '\\!'
        }

        sanitized_text = ""
        # Process one character at a time for better control
        for char in text:
            if char in replacements:
                sanitized_text += replacements[char]
            else:
                sanitized_text += char

        return sanitized_text

    def handle_conversation(self, update, context):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º–µ –±–µ—Å–µ–¥—ã —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.

        –¢–∞–∫–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ —Ç–µ–º—ã –¥–ª—è –∫–∞—Ä—Ç—ã,
        –µ—Å–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–ª–∞–≥–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.

        Args:
            update (telegram.Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context (telegram.ext.CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞

        Returns:
            int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        """
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π (–∫–∞—Ä—Ç–∞, –∞–¥–º–∏–Ω) —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
        user_data = context.user_data

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ç–µ–º—ã –¥–ª—è –∫–∞—Ä—Ç—ã
        if user_data.get('waiting_for_map_topic', False):
            user_topic = update.message.text
            user_id = update.message.from_user.id

            # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
            user_data['waiting_for_map_topic'] = False

            self.logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–∞—Ä—Ç—É –ø–æ —Ç–µ–º–µ: {user_topic}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            status_message = update.message.reply_text(
                f"üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –ø–æ —Ç–µ–º–µ ¬´{user_topic}¬ª...",
                parse_mode='HTML'
            )

            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞—Ä—Ç—ã —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏–π
                import concurrent.futures
                with concurrent.futures.ThreadPoolExecutor() as executor:
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º 30 —Å–µ–∫—É–Ω–¥
                    future = executor.submit(self.history_map.generate_map_by_topic, user_topic)
                    try:
                        map_image_path = future.result(timeout=30)
                    except concurrent.futures.TimeoutError:
                        map_image_path = None
                        self.logger.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã –ø–æ —Ç–µ–º–µ {user_topic}")

                if map_image_path and os.path.exists(map_image_path):
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
                    with open(map_image_path, 'rb') as img:
                        update.message.reply_photo(
                            photo=img,
                            caption=f"üó∫Ô∏è –ö–∞—Ä—Ç–∞ –ø–æ —Ç–µ–º–µ ¬´{user_topic}¬ª",
                            parse_mode='HTML'
                        )

                    # –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                    try:
                        os.remove(map_image_path)
                    except Exception:
                        pass

                    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π - —É–ø—Ä–æ—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    keyboard = [
                        [InlineKeyboardButton("üîç –î—Ä—É–≥–∞—è —Ç–µ–º–∞", callback_data='map_search_topic'),
                         InlineKeyboardButton("üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data='history_map')],
                        [InlineKeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]
                    ]
                else:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É
                    keyboard = [
                        [InlineKeyboardButton("üîç –î—Ä—É–≥–∞—è —Ç–µ–º–∞", callback_data='map_search_topic'),
                         InlineKeyboardButton("üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data='history_map')]
                    ]
                    update.message.reply_text(
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–±—ã—Ç–∏–π –ø–æ —Ç–µ–º–µ ¬´{user_topic}¬ª.",
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã: {str(e)}")
                keyboard = [
                    [InlineKeyboardButton("üîç –î—Ä—É–≥–∞—è —Ç–µ–º–∞", callback_data='map_search_topic'),
                     InlineKeyboardButton("üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data='history_map')]
                ]
                update.message.reply_text(
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ–º—É.",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )

            # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            try:
                context.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=status_message.message_id
                )
            except:
                pass

            return self.MAP

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if hasattr(self, 'admin_panel') and user_data.get('waiting_for_admin_id', False):
            self.admin_panel.process_new_admin_id(update, context)
            return self.CONVERSATION

        # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        user_message = update.message.text
        user_id = update.message.from_user.id

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ —Å—Ä–∞–∑—É
        context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)

        try:
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —Ç–µ–º–∞—Ç–∏–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ö—ç—à-—Ç–∞–±–ª–∏—Ü—ã (set)
            # –≤–º–µ—Å—Ç–æ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ —Å–ø–∏—Å–∫—É - –Ω–∞–º–Ω–æ–≥–æ –±—ã—Å—Ç—Ä–µ–µ –ø—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            history_keywords = {
                '—Ä–æ—Å—Å–∏—è', '–∏—Å—Ç–æ—Ä–∏—è', '—Ü–∞—Ä—å', '–∏–º–ø–µ—Ä–∞—Ç–æ—Ä', '—Å—Å—Å—Ä', '–≤–æ–π–Ω–∞', '—Ä–µ–≤–æ–ª—é—Ü–∏—è',
                '—Ä—É—Å—å', '—Å–æ–≤–µ—Ç', '–ø–µ—Ç—Ä', '–µ–∫–∞—Ç–µ—Ä–∏–Ω–∞', '—Å—Ç–∞–ª–∏–Ω', '–ª–µ–Ω–∏–Ω', '–∫–Ω—è–∑—å',
                '–¥–∏–Ω–∞—Å—Ç–∏—è', '–∫—Ä–µ–º–ª—å', '–º–æ—Å–∫–≤–∞', '–∫–∏–µ–≤', '–Ω–æ–≤–≥–æ—Ä–æ–¥', '—Ä—é—Ä–∏–∫', '—Ä–æ–º–∞–Ω–æ–≤'
            }

            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∑–∞ —Å—á–µ—Ç —Ä–∞–∑–±–∏–µ–Ω–∏—è –Ω–∞ —Å–ª–æ–≤–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤
            # –≠—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ –ø—Ä–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
            words = set(user_message.lower().split())
            is_history_related = bool(words.intersection(history_keywords))

            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å
            if not is_history_related and len(user_message) < 100:
                is_history_related = '?' in user_message or '—Ä–∞—Å—Å–∫–∞–∂–∏' in user_message.lower()

            # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–∑–æ–≤ API —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
            if is_history_related:
                # –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ –∏ —É—Å–∫–æ—Ä–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
                sanitized_message = self._sanitize_markdown(user_message)
                prompt = f"""–ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å –æ –†–æ—Å—Å–∏–∏: "{sanitized_message}". –ú–∞–∫—Å–∏–º—É–º 200 —Å–ª–æ–≤."""

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∏ —ç–∫–æ–Ω–æ–º–∏–∏
                response = self.api_client.ask_grok(prompt, max_tokens=600, temp=0.1)

                # –¢–∞–∫–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º Markdown
                response = self._sanitize_markdown(response)
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—Ä–∞–Ω–µ–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –≤–º–µ—Å—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                response = "–Ø –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å."

            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π - –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏
            keyboard = [[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='back_to_menu')]]

            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–ª–∏–Ω—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            try:
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
                if len(response) > 3500:
                    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
                    parts = [response[i:i+3500] for i in range(0, len(response), 3500)]
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–æ–π
                    sent_msg = update.message.reply_text(
                        parts[0] + "\n\n" + "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:",
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode=None  # –û—Ç–∫–ª—é—á–∞–µ–º Markdown –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                    )
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                    for part in parts[1:]:
                        update.message.reply_text(part, parse_mode=None)
                else:
                    sent_msg = update.message.reply_text(
                        response + "\n\n" + "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:",
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode=None  # –û—Ç–∫–ª—é—á–∞–µ–º Markdown –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                    )
            except telegram.error.BadRequest as e:
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
                sent_msg = update.message.reply_text(
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –í–æ—Ç –æ—Ç–≤–µ—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n" + 
                    response + "\n\n" + "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode=None
                )
            self.message_manager.save_message_id(update, context, sent_msg.message_id)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–µ—Å–µ–¥—ã: {str(e)}")
            # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            error_msg = update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='back_to_menu')]])
            )
            self.message_manager.save_message_id(update, context, error_msg.message_id)

        return self.CONVERSATION

    def recommend_similar_topics(self, current_topic, context):
        """
        –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Ö–æ–∂–∏–µ —Ç–µ–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã.

        Args:
            current_topic (str): –¢–µ–∫—É—â–∞—è —Ç–µ–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞

        Returns:
            list: –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–º
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
            prompt = f"–ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º—ã '{current_topic}' –ø—Ä–µ–¥–ª–æ–∂–∏ 3 —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–º—ã –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–µ—Ä–µ—á–∏—Å–ª–∏ –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π."

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç API
            similar_topics_text = self.api_client.ask_grok(prompt, max_tokens=150, temp=0.4)

            # –ü–∞—Ä—Å–∏–º —Ç–µ–º—ã
            similar_topics = []
            for line in similar_topics_text.split('\n'):
                # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º "1. –¢–µ–º–∞" –∏–ª–∏ "- –¢–µ–º–∞"
                if (line.strip().startswith(('1.', '2.', '3.', '-'))):
                    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
                    topic = re.sub(r'^[\d\.\-\s]+', '', line).strip()
                    if topic:
                        similar_topics.append(topic)

            return similar_topics[:3]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞–∫—Å–∏–º—É–º 3 —Ç–µ–º—ã
        except Exception as e:
            self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ö–æ–∂–∏–µ —Ç–µ–º—ã: {e}")
            return []

    def admin_command(self, update, context):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /admin –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏.

        Args:
            update (telegram.Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context (telegram.ext.CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        """
        # –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –º–æ–¥—É–ª—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        if hasattr(self, 'admin_panel'):
            self.admin_panel.handle_admin_command(update, context)
        else:
            update.message.reply_text("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

    def admin_callback(self, update, context):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏.

        Args:
            update (telegram.Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context (telegram.ext.CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        """
        query = update.callback_query

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        if hasattr(self, 'admin_panel'):
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ callback-–∑–∞–ø—Ä–æ—Å—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å admin_
            if query.data.startswith('admin_'):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –∏–ª–∏ –Ω–µ—Ç
                if query.data.startswith('admin_delete_'):
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                    admin_id = int(query.data.split('_')[2])
                    self.admin_panel.handle_delete_admin_callback(update, context, admin_id)
                else:
                    # –û–±—ã—á–Ω—ã–π admin callback
                    self.admin_panel.handle_admin_callback(update, context)
                return True
        return False

    def error_handler(self, update, context):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫: –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏—Ö –≤ –∂—É—Ä–Ω–∞–ª —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            update (telegram.Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context (telegram.ext.CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        """
        # –°–ª–æ–≤–∞—Ä—å —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
        self.ERROR_DESCRIPTIONS = {
            'BadRequest': '–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ –∫ Telegram API. –í–æ–∑–º–æ–∂–Ω–æ, —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.',
            'Unauthorized': '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞.',
            'TimedOut': '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Telegram API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            'NetworkError': '–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.',
            'ChatMigrated': '–ß–∞—Ç –±—ã–ª –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –Ω–∞ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–µ—Ä.',
            'TelegramError': '–û–±—â–∞—è –æ—à–∏–±–∫–∞ Telegram API.',
            'AttributeError': '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞—Ç—Ä–∏–±—É—Ç—É –æ–±—ä–µ–∫—Ç–∞.',
            'TypeError': '–û—à–∏–±–∫–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö.',
            'ValueError': '–û—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π.',
            'KeyError': '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ –∫–ª—é—á—É.',
            'IndexError': '–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ —Å–ø–∏—Å–∫–∞.'
        }

        error = context.error
        error_type = type(error).__name__

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
        user_info = f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id}" if update and update.effective_user else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        additional_info = f"–û—à–∏–±–∫–∞ –¥–ª—è {user_info} –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {update}" if update else "–û—à–∏–±–∫–∞ –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"

        self.logger.log_error(error, additional_info)

        if update and update.effective_message:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error}"

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
            if error_type in self.ERROR_DESCRIPTIONS:
                error_message += f"\n{self.ERROR_DESCRIPTIONS[error_type]}"

            update.effective_message.reply_text(
                error_message,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]])
            )