
import threading
import re
import random
import time
from src.interfaces import IContentProvider

class ContentService(IContentProvider):
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    
    def __init__(self, api_client, logger):
        self.api_client = api_client
        self.logger = logger
    
    def get_topic_info(self, topic, update_message_func=None):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–µ –∏–∑ API —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π.

        Args:
            topic (str): –¢–µ–º–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
            update_message_func (callable, optional): –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ

        Returns:
            list: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º tupple –¥–ª—è –Ω–µ–∏–∑–º–µ–Ω—è–µ–º–æ—Å—Ç–∏ –∏ –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–º—è—Ç–∏
        chapter_titles = (
            "üìú –í–í–ï–î–ï–ù–ò–ï –ò –ò–°–¢–û–ö–ò",
            "‚öîÔ∏è –û–°–ù–û–í–ù–´–ï –°–û–ë–´–¢–ò–Ø –ò –†–ê–ó–í–ò–¢–ò–ï",
            "üèõÔ∏è –ö–õ–Æ–ß–ï–í–´–ï –§–ò–ì–£–†–´ –ò –†–ï–§–û–†–ú–´",
            "üåç –í–ù–ï–®–ù–Ø–Ø –ü–û–õ–ò–¢–ò–ö–ê –ò –í–õ–ò–Ø–ù–ò–ï",
            "üìä –ò–¢–û–ì–ò –ò –ò–°–¢–û–†–ò–ß–ï–°–ö–û–ï –ó–ù–ê–ß–ï–ù–ò–ï"
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ API –∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        prompts = (
            f"–†–∞—Å—Å–∫–∞–∂–∏ –æ {topic} –≤ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏. –í–≤–µ–¥–µ–Ω–∏–µ –∏ –∏—Å—Ç–æ–∫–∏. –û–¥–∏–Ω –∞–±–∑–∞—Ü.",
            f"–†–∞—Å—Å–∫–∞–∂–∏ –æ {topic} –≤ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏. –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ. –û–¥–∏–Ω –∞–±–∑–∞—Ü.",
            f"–†–∞—Å—Å–∫–∞–∂–∏ –æ {topic} –≤ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏. –ö–ª—é—á–µ–≤—ã–µ —Ñ–∏–≥—É—Ä—ã –∏ —Ä–µ—Ñ–æ—Ä–º—ã. –û–¥–∏–Ω –∞–±–∑–∞—Ü.",
            f"–†–∞—Å—Å–∫–∞–∂–∏ –æ {topic} –≤ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏. –í–Ω–µ—à–Ω—è—è –ø–æ–ª–∏—Ç–∏–∫–∞ –∏ –≤–ª–∏—è–Ω–∏–µ. –û–¥–∏–Ω –∞–±–∑–∞—Ü.",
            f"–†–∞—Å—Å–∫–∞–∂–∏ –æ {topic} –≤ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏. –ò—Ç–æ–≥–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ. –û–¥–∏–Ω –∞–±–∑–∞—Ü."
        )

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ThreadPoolExecutor –≤–º–µ—Å—Ç–æ —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞–º–∏
        # –¥–ª—è –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
        all_responses = [""] * len(prompts)
        from concurrent.futures import ThreadPoolExecutor

        def fetch_response(args):
            index, prompt = args
            if update_message_func and index % 2 == 0:  # –°–æ–∫—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ 3 —Ä–∞–∑ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
                update_message_func(f"üìù –ó–∞–≥—Ä—É–∂–∞—é –≥–ª–∞–≤—ã –ø–æ —Ç–µ–º–µ: *{topic}*... {index+1}/{len(prompts)}")

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç API —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±—â–µ–≥–æ –∫—ç—à–∞ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–æ–≤
            response = self.api_client.ask_grok(prompt, max_tokens=500)
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥–ª–∞–≤—ã –ø–µ—Ä–µ–¥ —Ç–µ–∫—Å—Ç–æ–º
            return f"*{chapter_titles[index]}*\n\n{response}"

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ThreadPoolExecutor –¥–ª—è –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞–º–∏
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ 3 –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ API
        with ThreadPoolExecutor(max_workers=3) as executor:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º enumerate –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä—Ç–µ–∂–µ–π (index, prompt)
            responses = list(executor.map(fetch_response, enumerate(prompts)))
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Ç–≤–µ—Ç—ã —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏
        combined_responses = "\n\n" + "\n\n".join(responses)

        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏ —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º —Ä–∞—Å—á–µ—Ç–æ–º —Ä–∞–∑–º–µ—Ä–æ–≤
        messages = []
        max_length = 4000
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –∂–∞–¥–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –º–∞—Ä–∫–¥–∞—É–Ω –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        current_part = ""
        chapter_starts = []
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ –Ω–∞—á–∞–ª–∞ –≥–ª–∞–≤ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        paragraphs = combined_responses.split('\n\n')
        for i, paragraph in enumerate(paragraphs):
            if paragraph.startswith('*'):
                chapter_starts.append(i)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –∫–æ–Ω—Ü–∞ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        chapter_starts.append(len(paragraphs))
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≥–ª–∞–≤–∞–º —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ä–∞–∑–º–µ—Ä–∞
        start_idx = 0
        for end_idx in chapter_starts[1:]:
            chapter_content = '\n\n'.join(paragraphs[start_idx:end_idx])
            
            # –ï—Å–ª–∏ –≥–ª–∞–≤–∞ —Ü–µ–ª–∏–∫–æ–º –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –ª–∏–º–∏—Ç
            if len(chapter_content) <= max_length:
                if current_part and len(current_part) + len(chapter_content) + 2 > max_length:
                    messages.append(current_part)
                    current_part = chapter_content
                else:
                    if current_part:
                        current_part += '\n\n' + chapter_content
                    else:
                        current_part = chapter_content
            else:
                # –ì–ª–∞–≤–∞ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è —Ü–µ–ª–∏–∫–æ–º, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
                if current_part:
                    messages.append(current_part)
                    current_part = ""
                
                # –†–∞–∑–±–∏–≤–∞–µ–º –±–æ–ª—å—à—É—é –≥–ª–∞–≤—É –Ω–∞ —á–∞—Å—Ç–∏
                temp_paragraphs = chapter_content.split('\n\n')
                temp_part = ""
                
                for para in temp_paragraphs:
                    if len(temp_part) + len(para) + 2 > max_length:
                        messages.append(temp_part)
                        temp_part = para
                    else:
                        if temp_part:
                            temp_part += '\n\n' + para
                        else:
                            temp_part = para
                
                if temp_part:
                    current_part = temp_part
            
            start_idx = end_idx
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
        if current_part:
            messages.append(current_part)

        return messages
    
    def generate_test(self, topic):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
        prompt = f"–°–æ—Å—Ç–∞–≤—å 10 –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞ (1, 2, 3, 4) –ø–æ —Ç–µ–º–µ '{topic}' –≤ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏. –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ —É–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <—Ü–∏—Ñ—Ä–∞>'. –ö–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è —Å—Ç—Ä–æ–∫–æ–π '---'."
        try:
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            questions = self.api_client.ask_grok(prompt, max_tokens=1500, temp=0.2)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤
            question_list = [q.strip() for q in questions.split('---') if q.strip()]
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            valid_questions = []
            display_questions = []
            
            regexp = re.compile(r"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\s*(\d+)")
            
            for q in question_list:
                if '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:' in q:
                    valid_questions.append(q)
                    # –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    cleaned_q = regexp.sub("", q).strip()
                    display_questions.append(cleaned_q)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
            if len(valid_questions) < 5:
                raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞")

            return {
                'original_questions': valid_questions,
                'display_questions': display_questions
            }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞: {e}")
            # –ü—Ä–æ–±—É–µ–º –∑–∞–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—å—à–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            try:
                fallback_prompt = f"–°–æ—Å—Ç–∞–≤—å 5 –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞ (1, 2, 3, 4) –ø–æ —Ç–µ–º–µ '{topic}' –≤ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏. –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —É–∫–∞–∂–∏ '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <—Ü–∏—Ñ—Ä–∞>'."
                questions = self.api_client.ask_grok(fallback_prompt, max_tokens=800, temp=0.1)
                
                # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                valid_questions = [q for q in questions.split('\n\n') if '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:' in q]
                display_questions = [re.sub(r"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\s*\d+", "", q).strip() for q in valid_questions]
                
                return {
                    'original_questions': valid_questions,
                    'display_questions': display_questions
                }
            except:
                raise e  # –ï—Å–ª–∏ –∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –æ—à–∏–±–∫—É
