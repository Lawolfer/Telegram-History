
import threading
import re
import random
import time

class ContentService:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    
    def __init__(self, api_client, logger):
        self.api_client = api_client
        self.logger = logger
    
    def get_topic_info(self, topic, update_message_func=None):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–º–µ –∏–∑ API –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –µ—ë –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π.

        Args:
            topic (str): –¢–µ–º–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
            update_message_func (callable, optional): –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–æ –∑–∞–≥—Ä—É–∑–∫–µ

        Returns:
            list: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        chapter_titles = [
            "üìú –í–í–ï–î–ï–ù–ò–ï –ò –ò–°–¢–û–ö–ò",
            "‚öîÔ∏è –û–°–ù–û–í–ù–´–ï –°–û–ë–´–¢–ò–Ø –ò –†–ê–ó–í–ò–¢–ò–ï",
            "üèõÔ∏è –ö–õ–Æ–ß–ï–í–´–ï –§–ò–ì–£–†–´ –ò –†–ï–§–û–†–ú–´",
            "üåç –í–ù–ï–®–ù–Ø–Ø –ü–û–õ–ò–¢–ò–ö–ê –ò –í–õ–ò–Ø–ù–ò–ï",
            "üìä –ò–¢–û–ì–ò –ò –ò–°–¢–û–†–ò–ß–ï–°–ö–û–ï –ó–ù–ê–ß–ï–ù–ò–ï"
        ]

        prompts = [
            f"–†–∞—Å—Å–∫–∞–∂–∏ –æ {topic} –≤ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏ (–≥–ª–∞–≤–∞ 1). –î–∞–π –≤–≤–µ–¥–µ–Ω–∏–µ –∏ –Ω–∞—á–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é, –∏—Å—Ç–æ–∫–∏ —Ç–µ–º—ã. –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ. –û–±—ä–µ–º - –æ–¥–∏–Ω –∞–±–∑–∞—Ü. –ù–µ –ø–∏—à–∏ '–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç'.",
            f"–†–∞—Å—Å–∫–∞–∂–∏ –æ {topic} –≤ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏ (–≥–ª–∞–≤–∞ 2). –û–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ. –ù–µ –¥–µ–ª–∞–π –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–π –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ. –û–±—ä–µ–º - –æ–¥–∏–Ω –∞–±–∑–∞—Ü. –ù–µ –ø–∏—à–∏ '–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç'.",
            f"–†–∞—Å—Å–∫–∞–∂–∏ –æ {topic} –≤ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏ (–≥–ª–∞–≤–∞ 3). –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∏–≥—É—Ä–∞—Ö, —Ä–µ—Ñ–æ—Ä–º–∞—Ö –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ø–æ–ª–∏—Ç–∏–∫–µ. –û–±—ä–µ–º - –æ–¥–∏–Ω –∞–±–∑–∞—Ü. –ù–µ –ø–∏—à–∏ '–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç'.",
            f"–†–∞—Å—Å–∫–∞–∂–∏ –æ {topic} –≤ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏ (–≥–ª–∞–≤–∞ 4). –û–ø–∏—à–∏ –≤–Ω–µ—à–Ω—é—é –ø–æ–ª–∏—Ç–∏–∫—É, –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –∏ —Å–≤—è–∑–∏. –û–±—ä–µ–º - –æ–¥–∏–Ω –∞–±–∑–∞—Ü. –ù–µ –ø–∏—à–∏ '–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç'.",
            f"–†–∞—Å—Å–∫–∞–∂–∏ –æ {topic} –≤ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏ (–≥–ª–∞–≤–∞ 5). –û–ø–∏—à–∏ –∏—Ç–æ–≥–∏, –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –∫—É–ª—å—Ç—É—Ä–µ, –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è. –ó–∞–≤–µ—Ä—à–∏ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ. –û–±—ä–µ–º - –æ–¥–∏–Ω –∞–±–∑–∞—Ü."
        ]

        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API (–∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ—Ç–æ–∫–∏)
        all_responses = [""] * len(prompts)
        threads = []

        def fetch_response(index, prompt):
            if update_message_func:
                update_message_func(f"üìù –ó–∞–≥—Ä—É–∂–∞—é –≥–ª–∞–≤—É {index+1} –∏–∑ {len(prompts)} –ø–æ —Ç–µ–º–µ: *{topic}*...")

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç API —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±—â–µ–≥–æ –∫—ç—à–∞
            response = self.api_client.ask_grok(prompt)

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥–ª–∞–≤—ã –ø–µ—Ä–µ–¥ —Ç–µ–∫—Å—Ç–æ–º
            chapter_response = f"*{chapter_titles[index]}*\n\n{response}"
            all_responses[index] = chapter_response

        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–∏
        for i, prompt in enumerate(prompts):
            thread = threading.Thread(target=fetch_response, args=(i, prompt))
            thread.start()
            threads.append(thread)
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–∞–∑–≥—Ä—É–∑–∫–∏ API
            time.sleep(0.5)

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        for thread in threads:
            thread.join()

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Ç–≤–µ—Ç—ã —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
        combined_responses = "\n\n" + "\n\n".join(all_responses)

        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏ (–º–∞–∫—Å. 4000 —Å–∏–º–≤–æ–ª–æ–≤) –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
        messages = []
        max_length = 4000

        # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è markdown
        current_part = ""
        paragraphs = combined_responses.split('\n\n')

        for paragraph in paragraphs:
            if paragraph.startswith('*') and current_part and len(current_part) + len(paragraph) + 2 > max_length:
                # –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –≥–ª–∞–≤—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —á–∞—Å—Ç—å
                messages.append(current_part)
                current_part = paragraph
            elif len(current_part) + len(paragraph) + 2 > max_length:
                # –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å
                messages.append(current_part)
                current_part = paragraph
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –∞–±–∑–∞—Ü –∫ —Ç–µ–∫—É—â–µ–π —á–∞—Å—Ç–∏
                if current_part:
                    current_part += '\n\n' + paragraph
                else:
                    current_part = paragraph

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞
        if current_part:
            messages.append(current_part)

        return messages
    
    def generate_test(self, topic):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º–µ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
        prompt = f"–°–æ—Å—Ç–∞–≤—å 10 –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞ (1, 2, 3, 4) –ø–æ —Ç–µ–º–µ '{topic}' –≤ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏. –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤ —É–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <—Ü–∏—Ñ—Ä–∞>'. –ö–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è —Å—Ç—Ä–æ–∫–æ–π '---'."
        try:
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            questions = self.api_client.ask_grok(prompt, max_tokens=1500, temp=0.2)

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤
            question_list = [q.strip() for q in questions.split('---') if q.strip()]
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            valid_questions = []
            display_questions = []
            
            regexp = re.compile(r"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\s*(\d+)")
            
            for q in question_list:
                if '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:' in q:
                    valid_questions.append(q)
                    # –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    cleaned_q = regexp.sub("", q).strip()
                    display_questions.append(cleaned_q)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
            if len(valid_questions) < 5:
                raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞")

            return {
                'original_questions': valid_questions,
                'display_questions': display_questions
            }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞: {e}")
            # –ü—Ä–æ–±—É–µ–º –∑–∞–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—å—à–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            try:
                fallback_prompt = f"–°–æ—Å—Ç–∞–≤—å 5 –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞ (1, 2, 3, 4) –ø–æ —Ç–µ–º–µ '{topic}' –≤ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏. –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —É–∫–∞–∂–∏ '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <—Ü–∏—Ñ—Ä–∞>'."
                questions = self.api_client.ask_grok(fallback_prompt, max_tokens=800, temp=0.1)
                
                # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                valid_questions = [q for q in questions.split('\n\n') if '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:' in q]
                display_questions = [re.sub(r"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:\s*\d+", "", q).strip() for q in valid_questions]
                
                return {
                    'original_questions': valid_questions,
                    'display_questions': display_questions
                }
            except:
                raise e  # –ï—Å–ª–∏ –∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –æ—à–∏–±–∫—É
