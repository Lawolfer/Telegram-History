
import re
import random

class TopicService:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–º–∞–º–∏ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏"""
    
    def __init__(self, api_client, logger):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Ç–µ–º
        
        Args:
            api_client: –ö–ª–∏–µ–Ω—Ç API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            logger: –õ–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–µ–π—Å—Ç–≤–∏–π
        """
        self.api_client = api_client
        self.logger = logger
        
    def generate_topics_list(self, use_cache=True):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–º –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏
        
        Args:
            use_cache (bool): –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –∫—ç—à
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ —Ç–µ–º
        """
        prompt = "–°–æ—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ –∏–∑ 30 –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–º –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è. –ö–∞–∂–¥–∞—è —Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –µ–º–∫–æ–π –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π (–Ω–µ –±–æ–ª–µ–µ 6-7 —Å–ª–æ–≤). –ü–µ—Ä–µ—á–∏—Å–ª–∏ –∏—Ö –≤ –≤–∏–¥–µ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞."
        topics_text = self.api_client.ask_grok(prompt, use_cache=use_cache)
        
        # –ü–∞—Ä—Å–∏–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–º—ã
        return self.parse_topics(topics_text)
    
    def generate_new_topics_list(self):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ–º —Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º
        
        Returns:
            list: –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ–º
        """
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º
        random_seed = random.randint(1, 1000)
        prompt = f"–°–æ—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ –∏–∑ 30 –Ω–æ–≤—ã—Ö –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ–º –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è. –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ —Ç–µ–º–∞—Ö {random_seed}. –í—ã–±–µ—Ä–∏ —Ç–µ–º—ã, –æ—Ç–ª–∏—á–Ω—ã–µ –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∏ —Ä–∞–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö. –ö–∞–∂–¥–∞—è —Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –µ–º–∫–æ–π –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π (–Ω–µ –±–æ–ª–µ–µ 6-7 —Å–ª–æ–≤). –ü–µ—Ä–µ—á–∏—Å–ª–∏ –∏—Ö –≤ –≤–∏–¥–µ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞."
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤—ã—Ö —Ç–µ–º
        topics_text = self.api_client.ask_grok(prompt, use_cache=False)
        
        # –ü–∞—Ä—Å–∏–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–º—ã
        return self.parse_topics(topics_text)
    
    def parse_topics(self, topics_text):
        """
        –ü–∞—Ä—Å–∏—Ç —Ç–µ–º—ã –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ API
        
        Args:
            topics_text (str): –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ —Ç–µ–º
        """
        topics = []
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –∏—â–µ–º –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã
        for line in topics_text.splitlines():
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "1. –¢–µ–º–∞" –∏–ª–∏ "1) –¢–µ–º–∞"
            match = re.match(r'^\s*(\d+)[\.\)]\s+(.*?)$', line)
            if match:
                number, topic = match.groups()
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—É —Å –Ω–æ–º–µ—Ä–æ–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞
                topics.append(f"{number}. {topic.strip()}")
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã
        if not topics:
            for line in topics_text.splitlines():
                # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Ç–µ–º–∞–º–∏ –±–µ–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏
                if line.strip() and not line.startswith('#') and not line.startswith('**'):
                    topics.append(line.strip())
        
        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        filtered_topics = []
        seen_topics = set()
        
        for topic in topics:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Ç–µ–º—ã –±–µ–∑ –Ω–æ–º–µ—Ä–∞
            text = topic.split('. ', 1)[1] if '. ' in topic else topic
            text_lower = text.lower()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–∞–∫–æ–π —Ç–µ–º—ã –µ—â–µ –Ω–µ –±—ã–ª–æ
            if text_lower not in seen_topics:
                filtered_topics.append(topic)
                seen_topics.add(text_lower)
        
        return filtered_topics
    
    def get_topic_info(self, topic, update_callback=None):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ
        
        Args:
            topic (str): –¢–µ–º–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            update_callback (function): –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            
        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–µ–º–µ
        """
        try:
            chapters = [
                "–ò—Å—Ç–æ–∫–∏ –∏ –ø—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏",
                "–ö–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è",
                "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏",
                "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç",
                "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
            ]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–µ
            prompt = f"""–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ "{topic}" –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏.
            –†–∞–∑–¥–µ–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≥–ª–∞–≤—ã:
            1. {chapters[0]}: –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è, –ø—Ä–∏—á–∏–Ω—ã –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è, –∫–æ–Ω—Ç–µ–∫—Å—Ç —ç–ø–æ—Ö–∏
            2. {chapters[1]}: —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—è, –æ—Å–Ω–æ–≤–Ω—ã–µ —ç—Ç–∞–ø—ã, –∫–ª—é—á–µ–≤—ã–µ –¥–∞—Ç—ã
            3. {chapters[2]}: –≤–∞–∂–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–∏–≥—É—Ä—ã, –∏—Ö —Ä–æ–ª—å –∏ –≤–∫–ª–∞–¥
            4. {chapters[3]}: –≤–∑–∞–∏–º–æ—Å–≤—è–∑—å —Å –º–∏—Ä–æ–≤—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏, –≤–Ω–µ—à–Ω—è—è –ø–æ–ª–∏—Ç–∏–∫–∞
            5. {chapters[4]}: –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è, –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –¥–∞–ª—å–Ω–µ–π—à—É—é –∏—Å—Ç–æ—Ä–∏—é

            –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç—ã. –ü—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Å—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∏–ª—è –∏–∑–ª–æ–∂–µ–Ω–∏—è.
            –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –∏ —Ö–æ—Ä–æ—à–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π.
            """
            
            if update_callback:
                update_callback(f"üîç –°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ: *{topic}*...")
            
            response = self.api_client.ask_grok(prompt)
            
            if update_callback:
                update_callback(f"‚úèÔ∏è –§–æ—Ä–º–∞—Ç–∏—Ä—É—é –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ —Ç–µ–º–µ: *{topic}*...")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            formatted_content = self._format_content_with_chapters(response, chapters, topic)
            
            return {
                "status": "success",
                "content": formatted_content
            }
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–µ {topic}: {e}")
            return {
                "status": "error",
                "content": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ: {topic}. –û—à–∏–±–∫–∞: {str(e)}"
            }
    
    def _format_content_with_chapters(self, content, chapters, topic):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ –≥–ª–∞–≤—ã
        
        Args:
            content (str): –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            chapters (list): –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –≥–ª–∞–≤
            topic (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        """
        formatted_content = f"# {topic}\n\n"
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –≥–ª–∞–≤—ã
        chapter_contents = {}
        current_chapter = None
        
        for line in content.split('\n'):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –≥–ª–∞–≤—ã
            for i, chapter in enumerate(chapters, 1):
                if chapter in line or f"{i}." in line or f"{i}:" in line:
                    current_chapter = chapter
                    chapter_contents[current_chapter] = []
                    break
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∫ —Ç–µ–∫—É—â–µ–π –≥–ª–∞–≤–µ
            if current_chapter:
                chapter_contents[current_chapter].append(line)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤—ã –≤ Markdown
        for i, chapter in enumerate(chapters):
            if chapter in chapter_contents:
                chapter_text = '\n'.join(chapter_contents[chapter])
                # –£–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä –≥–ª–∞–≤—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                chapter_text = re.sub(r'^\d+[\.\:\)]?\s*', '', chapter_text)
                # –£–¥–∞–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–ª–∞–≤—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                chapter_text = re.sub(re.escape(chapter), '', chapter_text, flags=re.IGNORECASE)
                
                formatted_content += f"## {chapter}\n\n{chapter_text.strip()}\n\n"
            else:
                # –ï—Å–ª–∏ –≥–ª–∞–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç
                if i == 0 and not chapter_contents:
                    formatted_content += content
                    break
        
        return formatted_content
