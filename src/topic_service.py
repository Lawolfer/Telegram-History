
import re
import random

class TopicService:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–º–∞–º–∏ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏"""
    
    def __init__(self, api_client, logger):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Ç–µ–º
        
        Args:
            api_client: –ö–ª–∏–µ–Ω—Ç API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            logger: –õ–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–µ–π—Å—Ç–≤–∏–π
        """
        self.api_client = api_client
        self.logger = logger
        
    def generate_topics_list(self, use_cache=True):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–º –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏
        
        Args:
            use_cache (bool): –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –∫—ç—à
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ —Ç–µ–º
        """
        prompt = "–°–æ—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ –∏–∑ 30 –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–º –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è. –ö–∞–∂–¥–∞—è —Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –µ–º–∫–æ–π –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π (–Ω–µ –±–æ–ª–µ–µ 6-7 —Å–ª–æ–≤). –ü–µ—Ä–µ—á–∏—Å–ª–∏ –∏—Ö –≤ –≤–∏–¥–µ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞."
        topics_text = self.api_client.ask_grok(prompt, use_cache=use_cache)
        
        # –ü–∞—Ä—Å–∏–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–º—ã
        return self.parse_topics(topics_text)
    
    def generate_new_topics_list(self):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ–º —Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º
        
        Returns:
            list: –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ–º
        """
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º
        random_seed = random.randint(1, 1000)
        prompt = f"–°–æ—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ –∏–∑ 30 –Ω–æ–≤—ã—Ö –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ–º –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è. –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ —Ç–µ–º–∞—Ö {random_seed}. –í—ã–±–µ—Ä–∏ —Ç–µ–º—ã, –æ—Ç–ª–∏—á–Ω—ã–µ –æ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∏ —Ä–∞–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö. –ö–∞–∂–¥–∞—è —Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –µ–º–∫–æ–π –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π (–Ω–µ –±–æ–ª–µ–µ 6-7 —Å–ª–æ–≤). –ü–µ—Ä–µ—á–∏—Å–ª–∏ –∏—Ö –≤ –≤–∏–¥–µ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞."
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤—ã—Ö —Ç–µ–º
        topics_text = self.api_client.ask_grok(prompt, use_cache=False)
        
        # –ü–∞—Ä—Å–∏–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–º—ã
        return self.parse_topics(topics_text)
    
    def parse_topics(self, topics_text):
        """
        –ü–∞—Ä—Å–∏—Ç —Ç–µ–º—ã –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ API
        
        Args:
            topics_text (str): –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ —Ç–µ–º
        """
        topics = []
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –∏—â–µ–º –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã
        for line in topics_text.splitlines():
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "1. –¢–µ–º–∞" –∏–ª–∏ "1) –¢–µ–º–∞"
            match = re.match(r'^\s*(\d+)[\.\)]\s+(.*?)$', line)
            if match:
                number, topic = match.groups()
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—É —Å –Ω–æ–º–µ—Ä–æ–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞
                topics.append(f"{number}. {topic.strip()}")
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã
        if not topics:
            for line in topics_text.splitlines():
                # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Ç–µ–º–∞–º–∏ –±–µ–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏
                if line.strip() and not line.startswith('#') and not line.startswith('**'):
                    topics.append(line.strip())
        
        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        filtered_topics = []
        seen_topics = set()
        
        for topic in topics:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Ç–µ–º—ã –±–µ–∑ –Ω–æ–º–µ—Ä–∞
            text = topic.split('. ', 1)[1] if '. ' in topic else topic
            text_lower = text.lower()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–∞–∫–æ–π —Ç–µ–º—ã –µ—â–µ –Ω–µ –±—ã–ª–æ
            if text_lower not in seen_topics:
                filtered_topics.append(topic)
                seen_topics.add(text_lower)
        
        return filtered_topics
    
    def get_topic_info(self, topic, update_callback=None):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ
        
        Args:
            topic (str): –¢–µ–º–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            update_callback (function): –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ —Ç–µ–º–µ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ –∫–∞–∂–¥—É—é –≥–ª–∞–≤—É)
        """
        try:
            # –û—á–∏—â–∞–µ–º —Ç–µ–º—É –æ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            def sanitize_markdown(text):
                if not text:
                    return ""
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
                chars_to_escape = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
                for char in chars_to_escape:
                    text = text.replace(char, '\\' + char)
                return text
            
            # –û—á–∏—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
            safe_topic = sanitize_markdown(topic)
            
            chapters = [
                "–ò—Å—Ç–æ–∫–∏ –∏ –ø—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏",
                "–ö–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è", 
                "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏",
                "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç",
                "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
            ]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–µ
            prompt = f"""–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ "{safe_topic}" –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏.
            –†–∞–∑–¥–µ–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≥–ª–∞–≤—ã:
            1. {chapters[0]}: –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è, –ø—Ä–∏—á–∏–Ω—ã –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è, –∫–æ–Ω—Ç–µ–∫—Å—Ç —ç–ø–æ—Ö–∏
            2. {chapters[1]}: —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—è, –æ—Å–Ω–æ–≤–Ω—ã–µ —ç—Ç–∞–ø—ã, –∫–ª—é—á–µ–≤—ã–µ –¥–∞—Ç—ã
            3. {chapters[2]}: –≤–∞–∂–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–∏–≥—É—Ä—ã, –∏—Ö —Ä–æ–ª—å –∏ –≤–∫–ª–∞–¥
            4. {chapters[3]}: –≤–∑–∞–∏–º–æ—Å–≤—è–∑—å —Å –º–∏—Ä–æ–≤—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏, –≤–Ω–µ—à–Ω—è—è –ø–æ–ª–∏—Ç–∏–∫–∞
            5. {chapters[4]}: –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è, –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –¥–∞–ª—å–Ω–µ–π—à—É—é –∏—Å—Ç–æ—Ä–∏—é

            –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç—ã. –ü—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Å—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∏–ª—è –∏–∑–ª–æ–∂–µ–Ω–∏—è.
            –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –∏ —Ö–æ—Ä–æ—à–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π.
            """
            
            if update_callback:
                update_callback(f"üîç –°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ: *{topic}*...")
            
            response = self.api_client.ask_grok(prompt)
            
            if update_callback:
                update_callback(f"‚úèÔ∏è –§–æ—Ä–º–∞—Ç–∏—Ä—É—é –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ —Ç–µ–º–µ: *{topic}*...")
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≥–ª–∞–≤–∞–º –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            chapter_messages = self._split_content_into_chapters(response, chapters, safe_topic)
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∏—Ç—å –Ω–∞ –≥–ª–∞–≤—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–¥–∏–Ω –æ–±—â–∏–π –æ—Ç–≤–µ—Ç
            if not chapter_messages:
                try:
                    sanitized_content = sanitize_markdown(response)
                    return [f"üìö *{safe_topic}*\n\n{sanitized_content}"]
                except Exception as sanitize_error:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {sanitize_error}")
                    return [f"üìö *{safe_topic}*\n\n{response}"]
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            return chapter_messages
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–µ {topic}: {e}")
            return [f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ: {topic}. –û—à–∏–±–∫–∞: {str(e)}"]
    
    def _format_content_with_chapters(self, content, chapters, topic):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ –≥–ª–∞–≤—ã
        
        Args:
            content (str): –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            chapters (list): –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –≥–ª–∞–≤
            topic (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        """
        formatted_content = f"# {topic}\n\n"
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –≥–ª–∞–≤—ã
        chapter_contents = {}
        current_chapter = None
        
        for line in content.split('\n'):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –≥–ª–∞–≤—ã
            for i, chapter in enumerate(chapters, 1):
                if chapter in line or f"{i}." in line or f"{i}:" in line:
                    current_chapter = chapter
                    chapter_contents[current_chapter] = []
                    break
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∫ —Ç–µ–∫—É—â–µ–π –≥–ª–∞–≤–µ
            if current_chapter:
                chapter_contents[current_chapter].append(line)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤—ã –≤ Markdown
        for i, chapter in enumerate(chapters):
            if chapter in chapter_contents:
                chapter_text = '\n'.join(chapter_contents[chapter])
                # –£–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä –≥–ª–∞–≤—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                chapter_text = re.sub(r'^\d+[\.\:\)]?\s*', '', chapter_text)
                # –£–¥–∞–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–ª–∞–≤—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                chapter_text = re.sub(re.escape(chapter), '', chapter_text, flags=re.IGNORECASE)
                
                formatted_content += f"## {chapter}\n\n{chapter_text.strip()}\n\n"
            else:
                # –ï—Å–ª–∏ –≥–ª–∞–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç
                if i == 0 and not chapter_contents:
                    formatted_content += content
                    break
        
        return formatted_content
        
    def _split_content_into_chapters(self, content, chapters, topic):
        """
        –†–∞–∑–±–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≥–ª–∞–≤–∞–º
        
        Args:
            content (str): –ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            chapters (list): –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –≥–ª–∞–≤
            topic (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ –∫–∞–∂–¥—É—é –≥–ª–∞–≤—É
        """
        # –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –≥–ª–∞–≤—ã
        chapter_contents = {}
        current_chapter = None
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥–ª–∞–≤—ã
        chapter_emoji = {
            "–ò—Å—Ç–æ–∫–∏ –∏ –ø—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏": "üîç",
            "–ö–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è": "üìÖ",
            "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏": "üë•",
            "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç": "üåç",
            "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ": "‚öñÔ∏è"
        }
        
        # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
        if not content or len(content) < 50:
            return [f"üìö *{topic}*\n\n{content}"]
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ —Å—Ç—Ä–æ–∫–∞–º –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –≥–ª–∞–≤–∞–º
        lines = content.split('\n')
        current_chapter = None
        
        for line in lines:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –≥–ª–∞–≤—ã
            for i, chapter in enumerate(chapters, 1):
                # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≥–ª–∞–≤—ã
                if (chapter.lower() in line.lower() or 
                    f"{i}." in line or 
                    f"{i}:" in line or 
                    (i == 1 and ("–≤–≤–µ–¥–µ–Ω–∏–µ" in line.lower() or "–∏—Å—Ç–æ–∫–∏" in line.lower())) or
                    (i == 2 and ("—Å–æ–±—ã—Ç–∏—è" in line.lower() or "—Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—è" in line.lower())) or
                    (i == 3 and ("–ª–∏—á–Ω–æ—Å—Ç–∏" in line.lower() or "–¥–µ—è—Ç–µ–ª–∏" in line.lower())) or
                    (i == 4 and ("–º–∏—Ä" in line.lower() or "–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π" in line.lower())) or
                    (i == 5 and ("–∑–Ω–∞—á–µ–Ω–∏–µ" in line.lower() or "–≤–ª–∏—è–Ω–∏–µ" in line.lower() or "–∏—Ç–æ–≥–∏" in line.lower()))):
                    current_chapter = chapter
                    if current_chapter not in chapter_contents:
                        chapter_contents[current_chapter] = []
                    break
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∫ —Ç–µ–∫—É—â–µ–π –≥–ª–∞–≤–µ
            if current_chapter:
                # –ß–∏—Å—Ç–∏–º —Å—Ç—Ä–æ–∫—É –æ—Ç –Ω—É–º–µ—Ä–∞—Ü–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
                cleaned_line = line
                if current_chapter in line:
                    for i, chapter in enumerate(chapters, 1):
                        if chapter in line:
                            # –£–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä –≥–ª–∞–≤—ã –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏
                            cleaned_line = re.sub(rf'\d+[\.\:\)]?\s*{re.escape(chapter)}', '', line, flags=re.IGNORECASE)
                            cleaned_line = cleaned_line.strip()
                
                if cleaned_line:  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    chapter_contents[current_chapter].append(cleaned_line)
            # –ï—Å–ª–∏ –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –≥–ª–∞–≤—É, –∏—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–µ–º –≤ —Ç–µ–∫—Å—Ç–µ
            elif line.strip():
                found_chapter = False
                for chapter in chapters:
                    if any(keyword in line.lower() for keyword in chapter.lower().split()):
                        current_chapter = chapter
                        if current_chapter not in chapter_contents:
                            chapter_contents[current_chapter] = []
                        chapter_contents[current_chapter].append(line)
                        found_chapter = True
                        break
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –≥–ª–∞–≤—É, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ø–µ—Ä–≤—É—é
                if not found_chapter and chapters and chapters[0] not in chapter_contents:
                    current_chapter = chapters[0]
                    chapter_contents[current_chapter] = [line]
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∏—Ç—å –Ω–∞ –≥–ª–∞–≤—ã, –∑–Ω–∞—á–∏—Ç —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–æ –≥–ª–∞–≤–∞–º —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏
        if not chapter_contents and lines:
            # –†–∞–∑–±–∏–≤–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ –Ω–∞ 5 —Ä–∞–≤–Ω—ã—Ö —á–∞—Å—Ç–µ–π
            chunk_size = max(5, len(lines) // 5)
            for i, chapter in enumerate(chapters):
                start_idx = i * chunk_size
                end_idx = (i + 1) * chunk_size if i < 4 else len(lines)
                if start_idx < len(lines):
                    chapter_contents[chapter] = lines[start_idx:end_idx]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –≥–ª–∞–≤—ã
        messages = []
        
        # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ç–µ–º–æ–π
        title_message = f"üìö *{topic}*"
        
        # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ
        toc = "\n\n*–û–≥–ª–∞–≤–ª–µ–Ω–∏–µ:*\n"
        for i, chapter in enumerate(chapters, 1):
            emoji = chapter_emoji.get(chapter, "‚Ä¢")
            toc += f"{emoji} *–ì–ª–∞–≤–∞ {i}:* {chapter}\n"
        
        title_message += toc
        messages.append(title_message)
        
        # –ó–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –≥–ª–∞–≤—ã
        for i, chapter in enumerate(chapters, 1):
            if chapter in chapter_contents and chapter_contents[chapter]:
                # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –≥–ª–∞–≤—ã –æ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                chapter_text = '\n'.join(chapter_contents[chapter])
                
                # –£–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä –≥–ª–∞–≤—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                chapter_text = re.sub(r'^\d+[\.\:\)]?\s*', '', chapter_text)
                
                # –£–¥–∞–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–ª–∞–≤—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                chapter_text = re.sub(re.escape(chapter), '', chapter_text, flags=re.IGNORECASE)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                emoji = chapter_emoji.get(chapter, "‚Ä¢")
                chapter_message = f"{emoji} *–ì–ª–∞–≤–∞ {i}: {chapter}*\n\n{chapter_text.strip()}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä–∞ –≥–ª–∞–≤ –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                if i < len(chapters):
                    chapter_message += f"\n\n*–î–∞–ª–µ–µ:* –ì–ª–∞–≤–∞ {i+1}: {chapters[i]}"
                
                messages.append(chapter_message)
            else:
                # –ï—Å–ª–∏ –≥–ª–∞–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–µ–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
                emoji = chapter_emoji.get(chapter, "‚Ä¢")
                messages.append(f"{emoji} *–ì–ª–∞–≤–∞ {i}: {chapter}*\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–∞–Ω–Ω–æ–π –≥–ª–∞–≤–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        
        return messages
