
import re
import telegram
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ChatAction

class ConversationService:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–µ—Å–µ–¥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ–± –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏"""

    def __init__(self, api_client, logger, history_map=None):
        self.api_client = api_client
        self.logger = logger
        self.history_map = history_map

    def handle_conversation(self, update, context, message_manager):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º–µ –±–µ—Å–µ–¥—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º
        –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Ç–µ–º –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
        
        –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.

        Args:
            update (telegram.Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context (telegram.ext.CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            message_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π

        Returns:
            int: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        if not update or not update.message:
            self.logger.error("–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            return None
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π (–∫–∞—Ä—Ç–∞, –∞–¥–º–∏–Ω) —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
        user_data = context.user_data

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ç–µ–º—ã –¥–ª—è –∫–∞—Ä—Ç—ã
        if user_data.get('waiting_for_map_topic', False):
            return self._handle_map_topic(update, context)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if user_data.get('waiting_for_admin_id', False):
            # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
            return None  # –≠—Ç–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ handlers.py

        try:
            # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            user_message = update.message.text
            user_id = update.message.from_user.id
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–∞—Ç–∞
            try:
                context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)
            except Exception as chat_error:
                self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞: {chat_error}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            if 'conversation_history' not in user_data:
                user_data['conversation_history'] = []
                
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            user_data['conversation_history'].append(user_message)
            if len(user_data['conversation_history']) > 5:
                user_data['conversation_history'] = user_data['conversation_history'][-5:]

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–≤—è–∑–∞–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
            is_history_related = self._is_history_related(user_message, user_data)
            
            if is_history_related:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ API —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                response = self._generate_historical_response(user_message, user_data)
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
                response = self._get_default_response()

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
            keyboard = [
                [InlineKeyboardButton("üó∫Ô∏è –ö–∞—Ä—Ç–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π", callback_data='history_map')],
                [InlineKeyboardButton("üìö –ò–∑—É—á–∏—Ç—å —Ç–µ–º—É", callback_data='topic')],
                [InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]
            ]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–¥–∞–ª–µ–Ω —á–∞—Ç
            if not update.effective_chat:
                self.logger.error(f"–ß–∞—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return None
                
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
            sent_msg = self._send_response_safely(update, response, keyboard)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è –≤ –±—É–¥—É—â–µ–º
            if sent_msg:
                message_manager.save_message_id(update, context, sent_msg.message_id)
            else:
                self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
        except telegram.error.BadRequest as e:
            # –ë–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ "Message to edit not found"
            if "Message to edit not found" in str(e):
                self.logger.error(f"–û—à–∏–±–∫–∞ 'Message to edit not found': {e}")
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    error_msg = update.message.reply_text(
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å —Å–Ω–æ–≤–∞.",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]])
                    )
                    message_manager.save_message_id(update, context, error_msg.message_id)
                except Exception as reply_error:
                    self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {reply_error}")
            else:
                # –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ BadRequest
                self.logger.error(f"–û—à–∏–±–∫–∞ BadRequest: {e}")
                try:
                    error_msg = update.message.reply_text(
                        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ-–¥—Ä—É–≥–æ–º—É.",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]])
                    )
                    message_manager.save_message_id(update, context, error_msg.message_id)
                except Exception:
                    pass
                    
        except telegram.error.TelegramError as telegram_error:
            self.logger.error(f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–µ—Å–µ–¥—ã: {str(telegram_error)}")
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                error_msg = update.message.reply_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–∞—á–∞—Ç—å –±–µ—Å–µ–¥—É –∑–∞–Ω–æ–≤–æ.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]])
                )
                message_manager.save_message_id(update, context, error_msg.message_id)
            except Exception:
                self.logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ Telegram API")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–µ—Å–µ–¥—ã: {str(e)}")
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ
                error_msg = update.message.reply_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='back_to_menu')]])
                )
                message_manager.save_message_id(update, context, error_msg.message_id)
            except Exception as reply_error:
                self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {reply_error}")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –±–µ—Å–µ–¥—ã
        # –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ CONVERSATION –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≤ handlers.py
        return None  

    def _handle_map_topic(self, update, context):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ç–µ–º—ã –¥–ª—è –∫–∞—Ä—Ç—ã"""
        if not self.history_map:
            update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ—Ä–≤–∏—Å –∫–∞—Ä—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return None
            
        user_topic = update.message.text
        user_id = update.message.from_user.id

        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
        context.user_data['waiting_for_map_topic'] = False

        self.logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–∞—Ä—Ç—É –ø–æ —Ç–µ–º–µ: {user_topic}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        status_message = update.message.reply_text(
            f"üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –ø–æ —Ç–µ–º–µ ¬´{user_topic}¬ª...",
            parse_mode='HTML'
        )

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–∞—Ä—Ç—ã —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            import concurrent.futures
            import os
            
            with concurrent.futures.ThreadPoolExecutor() as executor:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º 30 —Å–µ–∫—É–Ω–¥
                future = executor.submit(self.history_map.generate_map_by_topic, user_topic)
                try:
                    map_image_path = future.result(timeout=30)
                except concurrent.futures.TimeoutError:
                    map_image_path = None
                    self.logger.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã –ø–æ —Ç–µ–º–µ {user_topic}")

            if map_image_path and os.path.exists(map_image_path):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
                with open(map_image_path, 'rb') as img:
                    update.message.reply_photo(
                        photo=img,
                        caption=f"üó∫Ô∏è –ö–∞—Ä—Ç–∞ –ø–æ —Ç–µ–º–µ ¬´{user_topic}¬ª",
                        parse_mode='HTML'
                    )

                # –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                try:
                    os.remove(map_image_path)
                except Exception:
                    pass

                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                keyboard = [
                    [InlineKeyboardButton("üîç –î—Ä—É–≥–∞—è —Ç–µ–º–∞", callback_data='map_search_topic'),
                     InlineKeyboardButton("üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data='history_map')],
                    [InlineKeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]
                ]
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É
                keyboard = [
                    [InlineKeyboardButton("üîç –î—Ä—É–≥–∞—è —Ç–µ–º–∞", callback_data='map_search_topic'),
                     InlineKeyboardButton("üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data='history_map')]
                ]
                update.message.reply_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–±—ã—Ç–∏–π –ø–æ —Ç–µ–º–µ ¬´{user_topic}¬ª.",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã: {str(e)}")
            keyboard = [
                [InlineKeyboardButton("üîç –î—Ä—É–≥–∞—è —Ç–µ–º–∞", callback_data='map_search_topic'),
                 InlineKeyboardButton("üîô –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data='history_map')]
            ]
            update.message.reply_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ–º—É.",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        try:
            context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=status_message.message_id
            )
        except:
            pass

        return None  # –ó–Ω–∞—á–µ–Ω–∏–µ MAP –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ handlers.py

    def _is_history_related(self, user_message, user_data):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å–≤—è–∑–∞–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –†–æ—Å—Å–∏–∏"""
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        # –†–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        history_keywords = {
            # –û–±—â–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
            '–∏—Å—Ç–æ—Ä–∏—è', '–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π', '–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ', '–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ', '–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏',
            '–ø—Ä–æ—à–ª–æ–µ', '—ç–ø–æ—Ö–∞', '–ø–µ—Ä–∏–æ–¥', '—ç—Ä–∞', '–≤–µ–∫', '—Å—Ç–æ–ª–µ—Ç–∏–µ', '–ª–µ—Ç–æ–ø–∏—Å—å', '—Ö—Ä–æ–Ω–∏–∫–∞',
            
            # –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –†–æ—Å—Å–∏–∏
            '—Ä–æ—Å—Å–∏—è', '—Ä–æ—Å—Å–∏–π—Å–∫–∞—è', '—Ä–æ—Å—Å–∏–π—Å–∫–æ–π', '—Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ', '—Ä–æ—Å—Å–∏–π—Å–∫—É—é', '—Ä—É—Å—å', 
            '–∫–∏–µ–≤—Å–∫–∞—è', '–º–æ—Å–∫–æ–≤—Å–∫–∞—è', '–Ω–æ–≤–≥–æ—Ä–æ–¥—Å–∫–∞—è', '–≤–ª–∞–¥–∏–º–∏—Ä—Å–∫–∞—è', '–∏–º–ø–µ—Ä–∏—è', '—Å—Å—Å—Ä', 
            '—Å–æ–≤–µ—Ç—Å–∫–∏–π', '—Å–æ–≤–µ—Ç—Å–∫–∞—è', '—Å–æ–≤–µ—Ç—Å–∫–æ–µ', '—Ñ–µ–¥–µ—Ä–∞—Ü–∏—è', '—Ä—Å—Ñ—Å—Ä', '—Ä–æ—Å—Å–∏–π—Å–∫–æ–π —Ñ–µ–¥–µ—Ä–∞—Ü–∏–∏',
            
            # –ü—Ä–∞–≤–∏—Ç–µ–ª–∏ –∏ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ—è—Ç–µ–ª–∏
            '—Ü–∞—Ä—å', '—Ü–∞—Ä–∏—Ü–∞', '–∫–Ω—è–≥–∏–Ω—è', '–∫–Ω—è–∑—å', '–∏–º–ø–µ—Ä–∞—Ç–æ—Ä', '–∏–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞', '–ø—Ä–∞–≤–∏—Ç–µ–ª—å',
            '–≥–æ—Å—É–¥–∞—Ä—å', '–º–æ–Ω–∞—Ä—Ö', '–≥–µ–Ω—Å–µ–∫', '–≥–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–∞—Ä—å', '–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç', '–ø—Ä–µ–º—å–µ—Ä',
            '–¥–∏–Ω–∞—Å—Ç–∏—è', '–ø—Ä–µ—Å—Ç–æ–ª', '–∫–æ—Ä–æ–Ω–∞', '—Ç—Ä–æ–Ω', '–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '—Ü–∞—Ä—Å—Ç–≤–æ–≤–∞–Ω–∏–µ',
            
            # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏
            '—Ä—é—Ä–∏–∫', '–æ–ª–µ–≥', '–∏–≥–æ—Ä—å', '–æ–ª—å–≥–∞', '—Å–≤—è—Ç–æ—Å–ª–∞–≤', '–≤–ª–∞–¥–∏–º–∏—Ä', '—è—Ä–æ—Å–ª–∞–≤', 
            '–∏–≤–∞–Ω', '–≥—Ä–æ–∑–Ω—ã–π', '–ø–µ—Ç—Ä', '–µ–∫–∞—Ç–µ—Ä–∏–Ω–∞', '–∞–ª–µ–∫—Å–∞–Ω–¥—Ä', '–Ω–∏–∫–æ–ª–∞–π', '–ø–∞–≤–µ–ª',
            '–ª–µ–Ω–∏–Ω', '—Å—Ç–∞–ª–∏–Ω', '—Ö—Ä—É—â–µ–≤', '–±—Ä–µ–∂–Ω–µ–≤', '–≥–æ—Ä–±–∞—á–µ–≤', '–µ–ª—å—Ü–∏–Ω', '–ø—É—Ç–∏–Ω',
            '—Ä–æ–º–∞–Ω–æ–≤', '—Ä–æ–º–∞–Ω–æ–≤—ã', '—Ä—é—Ä–∏–∫–æ–≤–∏—á–∏', '–≥–æ–¥—É–Ω–æ–≤', '—à—É–π—Å–∫–∏–π',
            
            # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã
            '–≤–æ–π–Ω–∞', '—Ä–µ–≤–æ–ª—é—Ü–∏—è', '–≤–æ—Å—Å—Ç–∞–Ω–∏–µ', '–±—É–Ω—Ç', '–ø–µ—Ä–µ–≤–æ—Ä–æ—Ç', '—Ä–µ—Ñ–æ—Ä–º–∞', '–ø–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–∞',
            '–∫—Ä–µ–ø–æ—Å—Ç–Ω–æ–µ', '–∫—Ä–µ–ø–æ—Å—Ç–Ω–∏—á–µ—Å—Ç–≤–æ', '—Ä–∞—Å–∫–æ–ª', '—Å–º—É—Ç–∞', '–æ–ø—Ä–∏—á–Ω–∏–Ω–∞', '–æ—Ç—Ç–µ–ø–µ–ª—å', '–∑–∞—Å—Ç–æ–π',
            '–∫–æ–ª–ª–µ–∫—Ç–∏–≤–∏–∑–∞—Ü–∏—è', '–∏–Ω–¥—É—Å—Ç—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è', '–ø—Ä–∏–≤–∞—Ç–∏–∑–∞—Ü–∏—è', '—Ä–∞—Å–ø–∞–¥', '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
            
            # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–π–Ω—ã –∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
            '–æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è', '–∫—Ä—ã–º—Å–∫–∞—è', '–∫–∞–≤–∫–∞–∑—Å–∫–∞—è', '–ø–µ—Ä–≤–∞—è –º–∏—Ä–æ–≤–∞—è', '–≤—Ç–æ—Ä–∞—è –º–∏—Ä–æ–≤–∞—è', 
            '–≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∞—è', '–≤–µ–ª–∏–∫–∞—è –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è', '–∞—Ñ–≥–∞–Ω—Å–∫–∞—è', '—á–µ—á–µ–Ω—Å–∫–∞—è', '—Ö–æ–ª–æ–¥–Ω–∞—è',
            
            # –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
            '–º–æ—Å–∫–≤–∞', '–ø–µ—Ç–µ—Ä–±—É—Ä–≥', '–ª–µ–Ω–∏–Ω–≥—Ä–∞–¥', '–∫–∏–µ–≤', '–Ω–æ–≤–≥–æ—Ä–æ–¥', '–ø—Å–∫–æ–≤', '–≤–ª–∞–¥–∏–º–∏—Ä', 
            '—Å—É–∑–¥–∞–ª—å', '–∫–∞–∑–∞–Ω—å', '–∫—Ä—ã–º', '—Å–∏–±–∏—Ä—å', '–ø–æ–≤–æ–ª–∂—å–µ', '–∫–∞–≤–∫–∞–∑', '—É—Ä–∞–ª', 
            '–∫—Ä–µ–º–ª—å', '–∫—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å', '–∑–∏–º–Ω–∏–π –¥–≤–æ—Ä–µ—Ü',
            
            # –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —è–≤–ª–µ–Ω–∏—è
            '–∫—Ä–µ—Å—Ç—å—è–Ω–µ', '–¥–≤–æ—Ä—è–Ω–µ', '–±–æ—è—Ä–µ', '–∫–∞–∑–∞–∫–∏', '–∫—É–ø—Ü—ã', '–¥—É—Ö–æ–≤–µ–Ω—Å—Ç–≤–æ', '–∏–Ω—Ç–µ–ª–ª–∏–≥–µ–Ω—Ü–∏—è',
            '–ø–æ–º–µ—â–∏–∫–∏', '–∫—Ä–µ–ø–æ—Å—Ç–Ω—ã–µ', '–ø—Ä–æ–ª–µ—Ç–∞—Ä–∏–∞—Ç', '–±—É—Ä–∂—É–∞–∑–∏—è', '–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞', '–ø–∞—Ä—Ç–∏—è',
            '–∫–æ–ª–ª–µ–∫—Ç–∏–≤–∏–∑–∞—Ü–∏—è', '–∏–Ω–¥—É—Å—Ç—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è', '–ø—è—Ç–∏–ª–µ—Ç–∫–∞', '–Ω—ç–ø', '–ø—Ä–∏–≤–∞—Ç–∏–∑–∞—Ü–∏—è',
            
            # –°–∏–≥–Ω–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –∑–∞–ø—Ä–æ—Å–æ–≤
            '–∫–æ–≥–¥–∞', '–ø–æ—á–µ–º—É', '–∫–∞–∫', '–≥–¥–µ', '–∫–∞–∫–æ–π', '–∫–∞–∫–∏–µ', '–∫–∞–∫–∞—è', '–∫—Ç–æ', '—á–µ–º',
            '—á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å', '—á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ', '—Ä–∞—Å—Å–∫–∞–∂–∏', '–æ–±—ä—è—Å–Ω–∏', '–æ–ø–∏—à–∏'
        }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–æ–≤–∞-–∑–∞–ø—Ä–æ—Å—ã –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        history_question_markers = {
            '—Ä–∞—Å—Å–∫–∞–∂–∏', '–æ–±—ä—è—Å–Ω–∏', '–æ–ø–∏—à–∏', '–ø–æ–≤–µ–¥–∞–π', '–ø–æ—è—Å–Ω–∏',
            '—á—Ç–æ —Ç–∞–∫–æ–µ', '–∫—Ç–æ —Ç–∞–∫–æ–π', '–∫—Ç–æ —Ç–∞–∫–∞—è', '–∫–æ–≥–¥–∞ –±—ã–ª', '–∫–æ–≥–¥–∞ –±—ã–ª–∞',
            '–∫–∞–∫–∏–µ –±—ã–ª–∏', '–≤ –∫–∞–∫–æ–º –≥–æ–¥—É', '–ø—Ä–∏ –∫–∞–∫–æ–º', '–∫–∞–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ'
        }

        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        message_lower = user_message.lower()
        words = set(message_lower.split())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        is_history_related = bool(words.intersection(history_keywords))
        
        # –ï—Å–ª–∏ –ø—Ä—è–º—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—Ä–∞–∑—ã
        if not is_history_related:
            for marker in history_question_markers:
                if marker in message_lower:
                    is_history_related = True
                    break
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤
        has_question_mark = '?' in user_message
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        previous_messages = user_data.get('conversation_history', [])[:-1]  # –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ
        previous_context = " ".join(previous_messages[-2:]) if previous_messages else ""
        
        # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ - —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–æ —Å –∏—Å—Ç–æ—Ä–∏–µ–π, –µ—Å–ª–∏:
        # 1. –ï—Å—Ç—å –∫–ª—é—á–µ–≤—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–≤–∞
        # 2. –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫ –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –±–∞–∑–æ–≤—ã–µ —Å–ª–æ–≤–∞
        # 3. –ü—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –±—ã–ª –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º –∏ —ç—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        
        if is_history_related or \
           (has_question_mark and any(word in message_lower for word in ['–∫—Ç–æ', '—á—Ç–æ', '–∫–æ–≥–¥–∞', '–≥–¥–µ', '–ø–æ—á–µ–º—É', '–∫–∞–∫'])) or \
           (previous_context and any(kw in previous_context.lower() for kw in ['—Ä–æ—Å—Å–∏—è', '–∏—Å—Ç–æ—Ä–∏—è', '—Ü–∞—Ä—å', '–≤–æ–π–Ω–∞'])):
            return True
            
        return False

    def _generate_historical_response(self, user_message, user_data):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å"""
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ API —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        previous_messages = user_data.get('conversation_history', [])[:-1]  # –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ
        
        if previous_messages:
            context_prompt = f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {' | '.join(previous_messages[-2:])}\n\n"
        else:
            context_prompt = ""
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
        prompt = f"""{context_prompt}–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏: "{user_message}"
        
        –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
        1. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ, —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–∫—Ç–∞—Ö.
        2. –£–ø–æ–º–∏–Ω–∞–π –¥–∞—Ç—ã –∏ –∫–ª—é—á–µ–≤—ã–µ –ª–∏—á–Ω–æ—Å—Ç–∏, –≥–¥–µ —É–º–µ—Å—Ç–Ω–æ.
        3. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ—è—Å–µ–Ω, –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–π –µ–≥–æ –≤ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –†–æ—Å—Å–∏–∏.
        4. –ú–∞–∫—Å–∏–º—É–º 300 —Å–ª–æ–≤.
        5. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ —Å–≤—è–∑–∞–Ω —Å –∏—Å—Ç–æ—Ä–∏–µ–π –†–æ—Å—Å–∏–∏, –≤–µ–∂–ª–∏–≤–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤—å –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é —Ç–µ–º–∞—Ç–∏–∫—É.
        """
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞
        response = self.api_client.ask_grok(prompt, max_tokens=800, temp=0.3)
        
        # –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        response = self._enhance_historical_response(response)
        
        return response

    def _get_default_response(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –ø–æ —Ç–µ–º–∞—Ç–∏–∫–µ"""
        return (
            "–Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏ –∏ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ–º–∞–º:\n\n"
            "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–∏–æ–¥—ã (–ö–∏–µ–≤—Å–∫–∞—è –†—É—Å—å, –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —Ü–∞—Ä—Å—Ç–≤–æ, –†–æ—Å—Å–∏–π—Å–∫–∞—è –∏–º–ø–µ—Ä–∏—è, –°–°–°–† –∏ —Ç.–¥.)\n"
            "‚Ä¢ –ü—Ä–∞–≤–∏—Ç–µ–ª–∏ –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ –í–æ–π–Ω—ã –∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã\n"
            "‚Ä¢ –ö—É–ª—å—Ç—É—Ä–∞ –∏ –∏—Å–∫—É—Å—Å—Ç–≤–æ\n"
            "‚Ä¢ –†–µ—Ñ–æ—Ä–º—ã –∏ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –∏—Å—Ç–æ—Ä–∏–µ–π –†–æ—Å—Å–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "\"–ö–æ–≥–¥–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –û–∫—Ç—è–±—Ä—å—Å–∫–∞—è —Ä–µ–≤–æ–ª—é—Ü–∏—è?\" –∏–ª–∏ \"–†–∞—Å—Å–∫–∞–∂–∏ –æ —Ä–µ—Ñ–æ—Ä–º–∞—Ö –ü–µ—Ç—Ä–∞ I\""
        )

    def _send_response_safely(self, update, response, keyboard):
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π 
        –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫, –∏–∑–±–µ–≥–∞—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        if not update or not update.message:
            self.logger.error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—ä–µ–∫—Ç update –∏–ª–∏ message")
            return None
            
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
            if not response or not isinstance(response, str):
                response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å."
                
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ (—Å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–º –ª–∏–º–∏—Ç–æ–º)
            if len(response) > 3000:
                parts = [response[i:i+3000] for i in range(0, len(response), 3000)]
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ reply_text –≤–º–µ—Å—Ç–æ edit_message_text
                    update.message.reply_text(parts[0], parse_mode=None)
                except telegram.error.BadRequest as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
                    # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫—É—é –≤–µ—Ä—Å–∏—é
                    try:
                        update.message.reply_text(parts[0][:1000] + "...", parse_mode=None)
                    except Exception as inner_e:
                        self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—É—é —á–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–∞: {inner_e}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –µ—Å—Ç—å, —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
                for i, part in enumerate(parts[1:-1], 1):
                    try:
                        update.message.reply_text(part, parse_mode=None)
                    except telegram.error.BadRequest as e:
                        self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∞—Å—Ç—å {i+1} –æ—Ç–≤–µ—Ç–∞: {e}")
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—É—é —á–∞—Å—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                        continue
                    except Exception as e:
                        self.logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–∏ {i+1}: {e}")
                        continue
                
                # –ü–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                try:
                    sent_msg = update.message.reply_text(
                        parts[-1] + "\n\n" + "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode=None
                    )
                    return sent_msg
                except telegram.error.BadRequest as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ, —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                    try:
                        sent_msg = update.message.reply_text(
                            "–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                            reply_markup=InlineKeyboardMarkup(keyboard),
                            parse_mode=None
                        )
                        return sent_msg
                    except Exception as inner_e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {inner_e}")
                        return None
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                try:
                    # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    sent_msg = update.message.reply_text(
                        response + "\n\n" + "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode=None
                    )
                    return sent_msg
                except telegram.error.BadRequest as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
                    # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
                    try:
                        short_response = response[:1000] + "... (–æ—Ç–≤–µ—Ç —Å–æ–∫—Ä–∞—â–µ–Ω –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)"
                        sent_msg = update.message.reply_text(
                            short_response + "\n\n" + "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                            reply_markup=InlineKeyboardMarkup(keyboard),
                            parse_mode=None
                        )
                        return sent_msg
                    except Exception as inner_e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {inner_e}")
                        # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏
                        try:
                            sent_msg = update.message.reply_text(
                                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                reply_markup=InlineKeyboardMarkup(keyboard),
                                parse_mode=None
                            )
                            return sent_msg
                        except Exception as btn_e:
                            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–Ω–æ–ø–æ–∫: {btn_e}")
                            return None
                
        except telegram.error.BadRequest as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
            # –í —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
            try:
                sent_msg = update.message.reply_text(
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]]),
                    parse_mode=None
                )
                return sent_msg
            except Exception as menu_e:
                self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –º–µ–Ω—é: {menu_e}")
                return None
        
        except telegram.error.TelegramError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
            try:
                sent_msg = update.message.reply_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='back_to_menu')]]),
                    parse_mode=None
                )
                return sent_msg
            except:
                return None
        
        except Exception as e:
            self.logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
            try:
                # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                sent_msg = update.message.reply_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data='back_to_menu')]]),
                    parse_mode=None
                )
                return sent_msg
            except:
                return None

    def _enhance_historical_response(self, response):
        """
        –£–ª—É—á—à–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏.
        
        Args:
            response (str): –ò—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        """
        if not response:
            return ""
            
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∞–±–∑–∞—Ü—ã –Ω–∞ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        paragraphs = response.split('\n\n')
        formatted_paragraphs = []
        
        for paragraph in paragraphs:
            # –ï—Å–ª–∏ –∞–±–∑–∞—Ü —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            if len(paragraph) > 300:
                sentences = re.split(r'(?<=[.!?])\s+', paragraph)
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –∞–±–∑–∞—Ü
                for i in range(0, len(sentences), 3):
                    end_idx = min(i + 3, len(sentences))
                    formatted_paragraphs.append(' '.join(sentences[i:end_idx]))
            else:
                formatted_paragraphs.append(paragraph)
                
        # –°–æ–µ–¥–∏–Ω—è–µ–º –∞–±–∑–∞—Ü—ã –æ–±—Ä–∞—Ç–Ω–æ —Å –¥–≤–æ–π–Ω—ã–º –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏
        formatted_text = '\n\n'.join(formatted_paragraphs)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ø–∏—Å–∫–æ–≤ –∏ —É–ª—É—á—à–∞–µ–º –∏—Ö —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        if ':' in formatted_text and ('\n-' in formatted_text or '\n‚Ä¢' in formatted_text):
            # –£–∂–µ –µ—Å—Ç—å —Å–ø–∏—Å–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            pass
        elif ':' in formatted_text and (',' in formatted_text or ';' in formatted_text):
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            lines = formatted_text.split('\n')
            formatted_lines = []
            
            for line in lines:
                if ':' in line and (',' in line.split(':', 1)[1] or ';' in line.split(':', 1)[1]):
                    intro, items_text = line.split(':', 1)
                    items = re.split(r'[,;]\s+', items_text.strip())
                    
                    formatted_lines.append(f"{intro}:")
                    for item in items:
                        if item.strip():
                            formatted_lines.append(f"‚Ä¢ {item.strip()}")
                    formatted_lines.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ —Å–ø–∏—Å–∫–∞
                else:
                    formatted_lines.append(line)
                    
            formatted_text = '\n'.join(formatted_lines)
        
        return formatted_text

    def _normalize_russian_input(self, text):
        """
        –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∏ —Ç–µ–º.
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–µ—á–∞—Ç–∫–∏, —Ä–∞–∑–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä—ã, –∏ —Ñ–æ—Ä–º—ã —Å–ª–æ–≤.
        
        Args:
            text (str): –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            
        Returns:
            str: –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        if not text:
            return ""
            
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        text = text.lower()
        
        # –°–ª–æ–≤–∞—Ä—å —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ–ø–µ—á–∞—Ç–æ–∫ –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–∏—Å–∞–Ω–∏–π
        typo_corrections = {
            '–∏—Å—Ç–æ—Ä–∏': '–∏—Å—Ç–æ—Ä–∏—è',
            '—Ä–æ—Å–∏–∏': '—Ä–æ—Å—Å–∏–∏',
            '—Ä—É—Å–∫–∏–π': '—Ä—É—Å—Å–∫–∏–π',
            '–ø—É—Ç–µ–Ω': '–ø—É—Ç–∏–Ω',
            '—Å—Ç–∞–ª–∏–Ω': '—Å—Ç–∞–ª–∏–Ω',
            '–ª–µ–Ω–µ–Ω': '–ª–µ–Ω–∏–Ω',
            '—Å—Å—Å—Ä': '—Å—Å—Å—Ä',
            '–ø–µ—Ç—Ä': '–ø–µ—Ç—Ä',
            '–µ–∫–∞—Ç–µ—Ä–∏–Ω': '–µ–∫–∞—Ç–µ—Ä–∏–Ω–∞',
            '—Ä–µ–≤–æ–ª—é—Ü–∏': '—Ä–µ–≤–æ–ª—é—Ü–∏—è',
            '–≤–æ–π–Ω–∞': '–≤–æ–π–Ω–∞',
            '–∫—Ä–∞—Å–Ω': '–∫—Ä–∞—Å–Ω—ã–π',
            '—Å–æ–≤–µ—Ü–∫': '—Å–æ–≤–µ—Ç—Å–∫–∏–π',
            '—Ü–∞—Ä': '—Ü–∞—Ä—å',
            '–∏–º–ø–µ—Ä': '–∏–º–ø–µ—Ä–∞—Ç–æ—Ä'
        }
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –¥–ª—è –æ—Å–Ω–æ–≤—ã —Å–ª–æ–≤–∞
        words = text.split()
        corrected_words = []
        
        for word in words:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–ø–µ—á–∞—Ç–æ–∫
            corrected = word
            for typo, correction in typo_corrections.items():
                if word.startswith(typo):
                    corrected = correction + word[len(typo):]
                    break
                    
            corrected_words.append(corrected)
            
        # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É
        normalized_text = ' '.join(corrected_words)
        
        # –ó–∞–º–µ–Ω—è–µ–º —á–∞—Å—Ç–æ —Å–º–µ—à–∏–≤–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã (–ª–∞—Ç–∏–Ω—Å–∫–∏–µ/–∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ)
        char_replacements = {
            'a': '–∞',  # –ª–∞—Ç–∏–Ω—Å–∫–∞—è -> –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∞—è
            'e': '–µ',
            'o': '–æ',
            'p': '—Ä',
            'c': '—Å',
            'x': '—Ö',
            'b': '–≤',
            'h': '–Ω',
            'y': '—É'
        }
        
        for lat, cyr in char_replacements.items():
            normalized_text = normalized_text.replace(lat, cyr)
            
        return normalized_text
